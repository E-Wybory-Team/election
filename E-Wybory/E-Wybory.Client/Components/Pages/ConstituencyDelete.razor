@page "/deleteconstituency/{constituencyId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject ICountyManagementService CountyManagementService
@inject IConstituencyManagementService ConstituencyManagementService
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Pracownicy PKW, Administratorzy" Context="authContext">
         <Authorized>
<div class="form-container">
    <h1>POTWIERDŹ USUNIĘCIE OKRĘGU WYBORCZEGO</h1>
    <EditForm Model="@constituencyModel" OnValidSubmit="HandleDeleteSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group-smaller">
            <label for="name">NAZWA OKRĘGU</label>
            <InputText @bind-Value="constituencyModel.constituencyName" id="name" class="form-input" readonly />
        </div>
        
        <div class="form-group-smaller">
            <label>ZASIĘG (POWIATY)</label>
            <div class="form-input valid">
                @foreach (var county in relatedCounties)
                {
                        <span>@county.CountyName, </span>
                }
            </div>
        </div>


        <div class="form-row">
            <button type="submit" class="red-submit-button">USUŃ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public int constituencyId { get; set; }

    bool isDeletedConstituency = false;
    string errorMessage;

    private ConstituencyViewModel constituencyModel = new ConstituencyViewModel();
    private List<CountyViewModel> relatedCounties = new List<CountyViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated ||
            (!user.IsInRole("Pracownicy PKW") && !user.IsInRole("Administratorzy")))
        {
            return;
        }

        if (!await ConstituencyManagementService.ConstituencyExists(constituencyId))
        {
            errorMessage = "Nie znaleziono okręgu!";
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
        else
        {
            constituencyModel = await ConstituencyManagementService.GetConstituencyById(constituencyId);
            relatedCounties = await ConstituencyManagementService.GetCountiesOfConstituency(constituencyId);
        }
    }

    private async Task HandleDeleteSubmit()
    {
        isDeletedConstituency = await ConstituencyManagementService.DeleteConstituency(constituencyId);
        errorMessage = isDeletedConstituency ? "Usunięto okręg pomyślnie!" : "Usuwanie okręgu się nie powiodło!";
        if (isDeletedConstituency)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/constituencylist");
    }

}
