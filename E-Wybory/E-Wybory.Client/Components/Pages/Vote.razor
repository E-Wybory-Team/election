@page "/vote"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IVoterManagementService VoterManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionManagementService ElectionManagementService
@inject IDistrictManagementService DistrictManagementService
@inject IElectionVoterManagementService ElectionVoterManagementService
@inject IPartyManagementService PartyManagementService
@inject IAuthService AuthService
@inject ICandidateManagementService CandidateManagementService
@inject IVoteManagementService VoteManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<link href="forms.css" rel="stylesheet" />
<div class="form-container">
    <h1>ODDAWANIE GŁOSU</h1>

    @if (string.IsNullOrEmpty(errorMessageAtStart))
    {
    @if (activeElections != null && activeElections.Count() > 0)
    {
        @foreach (var election in activeElections)
        {
            var electionTypeName = ElectionTypeManagementService.GetElectionTypeNameById(election.IdElectionType, electionTypes);

            var voteModel = votesInElections[election.IdElection];
            

            <EditForm Model="@voteModel" OnValidSubmit="() => HandleVoteSubmit(election.IdElection)">
                <DataAnnotationsValidator />

                <h2>Wybory @electionTypeName</h2>

                <div class="form-group">
                    <label for="kandydat">Kandydat</label>
                    <select @bind="@voteModel.IdCandidate" id="kandydat" class="form-select">
                        <option value="">Wybierz kandydata</option>
                        @if (electionCandidates.ContainsKey(election.IdElection))
                        {
                            @foreach (var candidate in electionCandidates[election.IdElection])
                            {
                                <option value="@candidate.IdCandidate">
                                    @candidatesData[candidate.IdCandidate]
                                </option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => voteModel.IdCandidate)" />
                </div>

                    <div class="checkbox-group">
                        <InputCheckbox class="checkbox" @bind-Value="@voteModel.IsValid" id="niewazny" />
                        <label for="niewazny" class="checkbox-label">Chcę oddać głos nieważny</label>
                    </div>

                    <div class="checkbox-group">
                        <InputCheckbox class="checkbox" @bind-Value="@sentConfirmation" id="confirmation" />
                        <label for="confirmation" class="checkbox-label">Chcę otrzymać potwierdzenie głosowania na adres e-mail</label>
                    </div>

                <button type="submit" class="submit-button">ZAGŁOSUJ</button>
            </EditForm>
        }
    }
    }
    else
    {
        <div class="alert alert-danger mt-3">@errorMessageAtStart</div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

</div>

@code {
    private VoteViewModel voteModel = new VoteViewModel();
    private List<CandidateViewModel> candidates = new List<CandidateViewModel>();
    private List<ElectionViewModel> activeElections = new List<ElectionViewModel>();
    private List<ElectionViewModel> filteredElections = new List<ElectionViewModel>();
    private Dictionary<int, List<CandidateViewModel>> electionCandidates = new Dictionary<int, List<CandidateViewModel>>();
    private Dictionary<int, string> candidatesData = new Dictionary<int, string>();
    private Dictionary<int, VoteViewModel> votesInElections = new Dictionary<int, VoteViewModel>();
    private List<ElectionTypeViewModel> electionTypes;
    private string errorMessageAtStart = String.Empty;
    private string errorMessage = String.Empty;
    private int IdDistrict = 0;
    private int IdVoter = 0;
    private bool sentConfirmation { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            activeElections = await ElectionManagementService.GetActiveElections();
            if (activeElections == null || activeElections.Count() <= 0)
            {
                errorMessageAtStart = "Nie ma żadnych trwających wyborów.";
                StateHasChanged();
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/");
            }
        }
        catch(Exception ex)
        {
            errorMessageAtStart = "Nie znaleziono aktualnych wyborów!";
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }


        try
        {
            IdVoter = await AuthService.GetCurrentUserIdVoter();
            IdDistrict = await AuthService.GetCurrentVoterIdDistrict();
            Console.WriteLine($"Id of voter: {IdVoter} and Id of district: {IdDistrict}");
            if(IdVoter == 0 || IdDistrict == 0)
            {
                errorMessageAtStart = "Nie znaleziono przypisanego obwodu użytkownikowi bądź użytkownik nie ma przypisanej funkcji wyborcy!";
                StateHasChanged();
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception)
        {
            errorMessageAtStart = "Nie znaleziono przypisanego obwodu użytkownikowi bądź użytkownik nie ma przypisanej funkcji wyborcy!";
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }

        try
        {
            var is2faEnabled = await AuthService.GetCurrentUser2faStatus();
            if (!is2faEnabled)
            {
                errorMessageAtStart = "Użytkownik nie przeszedł dwuskładnikowego uwierzytelniania!";
                StateHasChanged();
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/");
            }
        }
        catch(Exception)
        {
            errorMessageAtStart = "Użytkownik nie przeszedł dwuskładnikowego uwierzytelniania!";
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }

        var committees = await PartyManagementService.Parties();


        foreach (var activeElection in activeElections)
        {
            var hasVoted = await ElectionVoterManagementService.ElectionVoterExists(IdVoter, activeElection.IdElection);
            if (!hasVoted)
            {
                filteredElections.Add(activeElection);
                votesInElections.Add(activeElection.IdElection, new VoteViewModel()
                        {
                            IdDistrict = IdDistrict,
                            IdElection = activeElection.IdElection,
                            IsValid = false,
                            IdCandidate = 0
                        });

                // Initialize the dictionary entry
                var candidates = await CandidateManagementService.GetCandidatesByElectionDistrictId(activeElection.IdElection, IdDistrict);
                if (candidates != null && candidates.Any())
                {

                    electionCandidates[activeElection.IdElection] = candidates;

                    foreach (var candidate in candidates)
                    {
                        if (!candidatesData.ContainsKey(candidate.IdCandidate))
                        {

                            var person = await PersonManagementService.GetPersonNameSurnameById(candidate.IdPerson);
                            if (candidate.IdParty != null)
                            {
                                var partyName = PartyManagementService.GetPartyNameById(candidate.IdParty.Value, committees);
                                Console.WriteLine($"Party name: {partyName}");
                                person += " - partia: " + partyName;
                            }
                            if (!string.IsNullOrEmpty(person))
                            {
                                candidatesData[candidate.IdCandidate] = person;
                            }
                        }
                    }
                }
            }
        }

        activeElections = filteredElections;

        if (!activeElections.Any())
        {
            errorMessageAtStart = "Nie ma dostępnych wyborów dla użytkownika.";
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }
        electionTypes = await ElectionTypeManagementService.ElectionTypes();
    }


    private async Task HandleVoteSubmit(int idElection)
    {
        voteModel = votesInElections[idElection];
        var HasVoted = await ElectionVoterManagementService.ElectionVoterExists(IdVoter, voteModel.IdElection);
        if (voteModel.IdCandidate != 0)
        {
            if (!HasVoted)
            {
                var electionVoter = new ElectionVoterViewModel()
                    {
                        IdElection = voteModel.IdElection,
                        IdVoter = IdVoter,
                        VoteTime = DateTime.Now
                    };
                voteModel.IsValid = !voteModel.IsValid; //because user chose invalid vote(or did not choose)
                var votingResult1 = await VoteManagementService.AddVote(voteModel);
                errorMessage = "Głosowanie się nie powiodło!";
                if (sentConfirmation)
                {
                    await AuthService.SendingConfirmation();
                }
                if (votingResult1)
                {
                    var votingResult2 = await ElectionVoterManagementService.AddElectionVoter(electionVoter);
                    if (votingResult1 && votingResult2)
                    {
                        errorMessage = "Głosowanie się powiodło!";
                    }
                }
                else
                {
                    errorMessage = "Nie oddano głosu!";
                }
            }
            else
            {
                errorMessage = "Użytkownik już głosował!";
            }
        }
        else
        {
            errorMessage = "Użytkownik nie wskazał kandydata!";
        }


    }

}
