@page "/addcommissioner"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using E_Wybory.Client.FilterData
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@inject NavigationManager NavigationManager
@inject IVoivodeshipManagementService VoivodeshipManagementService
@inject IUserTypeManagementService UserTypeManagementService
@inject IUserTypeSetsManagementService UserTypeSetsManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject IPersonManagementService PersonManagementService
@inject IElectionUserManagementService ElectionUserManagementService

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Urzędnicy wyborczy, Administratorzy" Context="authContext">
         <Authorized>
<div class="form-container">
    <h1>DODAWANIE CZŁONKÓW KOMISJI DO OBWODU</h1>
    <EditForm Model="@userTypeSetViewModel" OnValidSubmit="HandleAddSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group-smaller">
            <label for="pesel">PESEL CZŁONKA KOMISJI</label>
            <InputText @bind-Value="@enteredPesel" id="pesel" class="form-input" placeholder="Nr Pesel członka komisji" />
        </div>
        <div class="form-group-smaller">
            <label for="wojewodztwo">WOJEWÓDZTWO</label>
            <select @bind="@SelectedVoivodeshipId" id="wojewodztwo" @bind:after="@OnVoivodeshipChanged">
                <option value="">Wybierz województwo</option>
                @foreach (var voivodeship in wrapper.VoivodeshipFilter)
                {
                    <option value="@voivodeship.idVoivodeship">
                        @voivodeship.voivodeshipName
                    </option>
                }
            </select>
        </div>
        <div class="form-group-smaller">
            <label for="powiat">POWIAT</label>
            <select @bind="@SelectedCountyId" id="powiat"  @bind:after="@OnCountyChanged">
                <option value="">Wybierz powiat</option>
                @foreach (var county in wrapper.CountyFilter)
                {
                    @if (county.IdVoivodeship == SelectedVoivodeshipId)
                    {
                        <option value="@county.IdCounty">
                            @county.CountyName
                        </option>
                    }
                }
            </select>
        </div>
        <div class="form-group-smaller">
            <label for="gmina">GMINA</label>
            <select @bind="@SelectedProvinceId" id="gmina" @bind:after="@OnProvinceChanged">
                <option value="">Wybierz gminę</option>
                @foreach (var province in wrapper.ProvinceFilter)
                {
                    @if (province.IdCounty == SelectedCountyId)
                    {
                        <option value="@province.IdProvince">
                            @province.ProvinceName
                        </option>
                    }
                }
            </select>
        </div>
        <div class="form-group-smaller">
            <label for="numer-obwodu">NUMER OBWODU</label>
            <select @bind="@SelectedDistrictId" id="numer-obwodu">
                <option value="">Wybierz numer obwodu</option>
                @foreach (var district in wrapper.DistrictFilter)
                {
                    @if (district.IdProvince == SelectedProvinceId)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                }
            </select>
        </div>
        <div class="form-group-smaller">
            <label for="stopien">STOPIEŃ</label>
            <select @bind="@userTypeSetViewModel.IdUserType" id="stopien">
                <option value="">Wybierz stopień w komisji wyborczej</option>
                @foreach (var rank in commissionsRanks)
                {
                    <option value="@rank.IdUserType">
                        @rank.UserTypeName
                    </option>
                }
            </select>
        </div>

        <div class="form-row">
            <button type="submit" class="submit-button">DODAJ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;
    private int? SelectedDistrictId { get; set; } = null;

    private int commissionGroupId = 2;
    private string errorMessage = String.Empty;
    private string? enteredPesel { get; set; } = null;

    private FilterListWrapper wrapper = new FilterListWrapper();
    private UserTypeSetViewModel userTypeSetViewModel = new UserTypeSetViewModel();
    private List<UserTypeViewModel> commissionsRanks = new List<UserTypeViewModel>();

    protected override async Task OnInitializedAsync()
    {
        wrapper.VoivodeshipFilter = await VoivodeshipManagementService.Voivodeships();
        commissionsRanks = await UserTypeManagementService.GetUserTypesOfGroup(commissionGroupId);
    }

    private async Task HandleAddSubmit()
    {
        if((enteredPesel == null || enteredPesel == String.Empty) 
                || (SelectedDistrictId == null || SelectedDistrictId == 0)
                || userTypeSetViewModel.IdUserType == 0)
        {
            errorMessage = "Nie uzupełniono wszystkich pól!";
            return;
        }

        int index = await PersonManagementService.GetPersonIdByPeselAsync(enteredPesel);                                                                                                      
        if (index == 0) //if person with this PESEL not found
        {
            errorMessage = "Nie znaleziono osoby w bazie o podanym nr PESEL!";
            return;
        }

        var electionUser = await ElectionUserManagementService.GetElectionUserByPersonId(index);
        if(electionUser.IdElectionUser == 0)
        {
            errorMessage = "Nie znaleziono użytkownika o podanym nr PESEL!";
            return;
        }


        if (await UserTypeSetsManagementService.UserWithTypeGroupExists(userTypeSetViewModel.IdUserType, electionUser.IdElectionUser))
        {
            errorMessage = "Podany użytkownik już ma podany typ użytkownika tej grupy!";
            return;
        }

        if(electionUser.IdDistrict != SelectedDistrictId) //if district entered by user is different
        {
            await ElectionUserManagementService.PutUserDistrict(electionUser, SelectedDistrictId.Value);
        }

        userTypeSetViewModel.IdElectionUser = electionUser.IdElectionUser;
        var isAddedCommissioner = await UserTypeSetsManagementService.AddUserTypeSet(userTypeSetViewModel);
        errorMessage = isAddedCommissioner ? "Dodano członka komisji pomyślnie!" : "Dodawanie członka komisji się nie powiodło";
        if(isAddedCommissioner)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/commissionerslist");
    }

    private async Task FilterTable()
    {
        wrapper = await FilterWrapperService.GetFilteredListsWrapper(SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterTable();
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterTable();
    }

    private async Task OnProvinceChanged()
    {
        SelectedDistrictId = null;

        await FilterTable();
    }
}
