@page "/add-election"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using E_Wybory.Client.Services;
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IElectionManagementService ElectionManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject NavigationManager NavigationManager
<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Pracownicy PKW, Administratorzy" Context="authContext">
         <Authorized>
<div class="form-container">
    <h1>REJESTROWANIE WYBORÓW</h1>
    <EditForm FormName="ElectionAdd" Model="@electionModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="rodzaj">RODZAJ</label>
            <InputSelect @bind-Value="electionModel.IdElectionType" id="rodzaj-wyborow">
                <option value="">Wybierz rodzaj</option>
                @foreach (var electionType in electionTypes)
                {
                    <option value="@electionType.IdElectionType">
                        @electionType.ElectionTypeName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => electionModel.IdElectionType)" />
        </div>

        <div class="form-group">
            <label for="dzien-wyborow">ROZPOCZĘCIE WYBORÓW</label>
            <InputText @bind-Value="electionModel.DateOfStartString" id="dzien-wyborow" type="datetime-local"  placeholder="Wprowadź datę rozpoczęcia wyborów"/>
            <ValidationMessage For="@(() => electionModel.DateOfStartString)" />
        </div>

        <div class="form-group">
            <label for="dzien-wyborow-koniec">KONIEC WYBORÓW</label>
             <InputText @bind-Value="electionModel.DateOfEndString" id="dzien-wyborow-koniec" type="datetime-local" placeholder="Wprowadź datę zakończenia wyborów"/>
            <ValidationMessage For="@(() => electionModel.DateOfEndString)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessageDate))
        {
            <div class="alert alert-danger mt-3">@errorMessageDate</div>
        }

        <div class="form-group">
            <label for="tura">TURA WYBORÓW</label>
            <InputNumber @bind-Value="electionModel.ElectionTour" id="tura" />
            <ValidationMessage For="@(() => electionModel.ElectionTour)" />
        </div>

        <div class="form-row">
            <button type="submit" class="submit-button" @onclick="ValidateDates">DODAJ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private ElectionViewModel electionModel = new ElectionViewModel();
    private List<ElectionTypeViewModel> electionTypes = new List<ElectionTypeViewModel>();

    bool isAddedElection = false;
    string errorMessage;
    string errorMessageDate;

    protected override async Task OnInitializedAsync()
    {
        electionTypes = await ElectionTypeManagementService.ElectionTypes();
    }

    private async Task HandleValidSubmit()
    {
        if(!(await ElectionManagementService.ElectionOfTypeAtTimeExist(electionModel)))
        {
            errorMessage = "Wybory tego typu w podanym czasie już istnieją!";
            return;
        }
        isAddedElection = await ElectionManagementService.AddElection(electionModel);
        errorMessage = isAddedElection ? "Dodano wybory pomyślnie!" : "Nie udało sie dodać wyborów";
        if(isAddedElection)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/configure-election");
    }

    private void ValidateDates()
    {
        if (electionModel.ElectionStartDate >= electionModel.ElectionEndDate)
        {
            errorMessageDate = "Data zakończenia wyborów nie może być wcześniejsza niż data rozpoczęcia wyborów";
        }
        else{
            errorMessageDate = string.Empty;
        }
    }

}
