@page "/reset-password"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using E_Wybory.Application.Wrappers
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using E_Wybory.Client.Components.Pages
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService


<div class="reset-password-form">
    <div class="icon">
        <img src="images/reset-password.png" alt="Ikona resetowania hasła" width="400" height="400" />
    </div>

    <EditForm FormName="ResetPassword" Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
        
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="input-group">
                <img src="images/user.png" alt="Ikona użytkownika" class="input-icon" />
                <InputText @bind-Value="resetPasswordModel.Email" placeholder="Wprowadź swój E-MAIL" class="form-input" />
                <div style="margin-left: 10px;">
                    <ValidationMessage For="@(() => resetPasswordModel.Email)" />
                </div> 
           </div>

            <div class="input-group">
                <img src="images/lock.png" alt="Ikona zamka" class="input-icon" />
                <InputText @bind-Value="resetPasswordModel.NewPassword" type="password" placeholder="Nowe HASŁO" class="form-input" />
                <div style="margin-left: 10px;">
                    <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
                </div>
            </div>

            <div class="input-group">
                <img src="images/lock.png" alt="Ikona zamka" class="input-icon" />
                <InputText @bind-Value="resetPasswordModel.NewConfirmPassword" type="password" placeholder="Potwierdź HASŁO" class="form-input" />
                <div style="margin-left: 10px;">
                    <ValidationMessage For="@(() => resetPasswordModel.NewConfirmPassword)" />
                </div>
            </div>
            
            <div class="input-group">
                <InputText @bind-Value="resetPasswordModel.ResetCode" id="resetCode" class="form-input" autocomplete="off" placeholder="Wprowadź kod" />
                <div style="margin-left: 10px;">
                    <ValidationMessage For="@(() => resetPasswordModel.ResetCode)" />
                </div>
        </div>
        </div>
        <div class="form-row">
            <button type="submit" class="submit-button">RESETUJ HASŁO</button>
        </div>
    </EditForm>
     <StatusMessage Message="@message" />
</div>

@code {

    private ResetPasswordViewModel resetPasswordModel = new ResetPasswordViewModel();
    private string? message;
    private UserWrapper? _user;
    private ElectionAuthStateProvider? _authStateProvider;

    protected override async Task OnInitializedAsync()
    {
        _authStateProvider = AuthStateProvider as ElectionAuthStateProvider;
        var result = await _authStateProvider!.GetAuthenticationStateAsync();

        _user = new UserWrapper(result.User);

        if (_user.IsAuthenticated)
            message = "Uwaga! Po poprawnym resecie hasła nastąpi wylogowanie.";
    }

    private async Task HandleResetPassword()
    {
        bool result = await AuthService.ResetPassword(resetPasswordModel);
        if(result)
        {
            message = "Hasło zresetowane pomyślnie.";
            StateHasChanged();
            await Task.Delay(3000);
            await LogoutIfNecessery();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            message = "Resetowanie hasła nie powiodło się. Zweryfikuj poprawność kodu.";
        }

    }

    private async Task LogoutIfNecessery()
    {
        if(_user is null || !_user.IsAuthenticated) return;
        await AuthService.Logout();
    }

}
