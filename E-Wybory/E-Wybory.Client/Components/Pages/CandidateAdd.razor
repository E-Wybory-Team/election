@page "/addcandidate"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using E_Wybory.Client.Services;
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IPersonManagementService PersonManagementService
@inject ICandidateManagementService CandidateManagementService
@inject IDistrictManagementService DistrictManagementService
@inject IPartyManagementService PartyManagementService
@inject IElectionManagementService ElectionManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject NavigationManager NavigationManager

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Pracownicy PKW, Administratorzy" Context="authContext">
         <Authorized>

<div class="candidate-form-container">
    <h1>DODAWANIE KANDYDATA W WYBORACH</h1>

    <EditForm FormName="CandidateAdd" Model="@candidatePersonModel"  OnValidSubmit="HandleAddCandidate" class="candidate-form">
        <DataAnnotationsValidator />
        @* <ValidationSummary/> *@

        <div class="form-row">
            <div class="form-group">
                <label for="name">IMIONA</label>
                <InputText id="name" @bind-Value="candidatePersonModel.personViewModel.Name" placeholder="Wprowadź imiona kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.Name)" />
            </div>
            <div class="form-group">
                <label for="lastName">NAZWISKO</label>
                <InputText id="lastName" @bind-Value="candidatePersonModel.personViewModel.Surname" placeholder="Wprowadź nazwisko kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.Surname)" />
            </div>
            <div class="form-group">
                <label for="birthDate">DATA URODZENIA</label>
                <InputText id="birthDate" @bind-Value="candidatePersonModel.personViewModel.DateOfBirthString" type="date" placeholder="Wprowadź datę urodzenia kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.DateOfBirthString)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="pesel">PESEL</label>
                <InputText id="pesel" @bind-Value="candidatePersonModel.personViewModel.PESEL" @oninput="HandlePeselInput" placeholder="Wprowadź nr PESEL kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.PESEL)" />
            </div>
            <div class="form-group">
                <label for="occupation">ZAWÓD</label>
                <InputText id="occupation" @bind-Value="candidatePersonModel.candidateViewModel.JobType" placeholder="Wprowadź zawód kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.JobType)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="workplace">MIEJSCE PRACY</label>
                <InputText id="workplace" @bind-Value="candidatePersonModel.candidateViewModel.Workplace" placeholder="Wprowadź miejsce pracy kandydata" />
            </div>
            <div class="form-group">
                <label for="campaign">OPIS KAMPANII WYBORCZEJ</label>
                <InputText id="campaign" @bind-Value="candidatePersonModel.candidateViewModel.CampaignDescription" placeholder="Opisz kampanię wyborczą kandydata" />
            </div>
            <div class="form-group">
                <label for="listNumber">NUMER NA LIŚCIE</label>
                <InputNumber id="listNumber" @bind-Value="candidatePersonModel.candidateViewModel.PositionNumber" placeholder="Wprowadź numer na liście" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.PositionNumber)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="education">WYKSZTAŁCENIE</label>
                <InputSelect id="education" @bind-Value="candidatePersonModel.candidateViewModel.EducationStatus">
                    <option value="">Wybierz wykształcenie</option>
                    <option value="Podstawowe">Podstawowe</option>
                    <option value="Średnie">Średnie</option>
                    <option value="Wyższe">Wyższe</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="partyAffiliation">PRZYNALEŻNOŚĆ DO PARTII</label>
                <InputSelect id="partyAffiliation" @bind-Value="candidatePersonModel.candidateViewModel.IdParty">
                    <option value="">Wybierz partię</option>
                    @foreach (var party in parties)
                    {
                        <option value="@party.IdParty">
                            @party.PartyName
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="election">WYBORY</label>
                <InputSelect id="election" @bind-Value="candidatePersonModel.candidateViewModel.IdElection">
                    <option value="">Wybierz wybory</option>
                    @foreach (var election in elections)
                    {
                        var electionTypeName = ElectionTypeManagementService.GetElectionTypeNameById(election.IdElectionType, electionTypes);
                        <option value="@election.IdElection">
                            @electionTypeName - @election.ElectionStartDate;
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.IdElection)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="placeOfResidence">MIEJSCE ZAMIESZKANIA</label>
                <InputText id="placeOfResidence" @bind-Value="candidatePersonModel.candidateViewModel.PlaceOfResidence" placeholder="Wprowadź miejscowość zamieszkania" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.PlaceOfResidence)" />
            </div>
            <div class="form-group">
                <label for="districtNumber">OBWÓD WYBORCZY</label>
                <InputSelect id="districtNumber" @bind-Value="candidatePersonModel.candidateViewModel.IdDistrict">
                    <option value="">Wybierz obwód wyborczy</option>
                    @foreach (var district in districts)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.IdDistrict)" />
            </div>
        </div>
        <div class="form-row">
            <button type="submit" class="submit-button">DODAJ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>
                     </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private List<ElectionViewModel> elections = new List<ElectionViewModel>();
    private List<ElectionTypeViewModel> electionTypes = new List<ElectionTypeViewModel>();

    private CandidatePersonViewModel candidatePersonModel = new CandidatePersonViewModel();

    bool isAddedPerson = false;
    bool isAddedCandidate = false;
    string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        districts = await DistrictManagementService.Districts();
        parties = await PartyManagementService.Parties();
        elections = await ElectionManagementService.Elections();
        electionTypes = await ElectionTypeManagementService.ElectionTypes();
    }


    private async Task HandleAddCandidate()
    {
        int index = await PersonManagementService.GetPersonIdByPeselAsync(candidatePersonModel.personViewModel.PESEL); //check if person exists

        if(index == 0) //if person with this PESEL not found
        {
            isAddedPerson = await PersonManagementService.AddPerson(candidatePersonModel.personViewModel);
            index = await PersonManagementService.GetPersonIdByPeselAsync(candidatePersonModel.personViewModel.PESEL);

        }
        else
        {
            var existingPerson = await PersonManagementService.GetPersonById(index);

            //check if data in form of person are the same as in database
            if(existingPerson.Name != candidatePersonModel.personViewModel.Name 
                || existingPerson.Surname != candidatePersonModel.personViewModel.Surname 
                || existingPerson.DateOfBirthString != candidatePersonModel.personViewModel.DateOfBirthString)
            {
                errorMessage = "Podane dane dot. kandydata są niespójne z bazą danych(imię, nazwisko bądź data urodzenia). Należy je poprawić na prawidłowe!";
                return;
            }
        }
        candidatePersonModel.candidateViewModel.IdPerson = index;
        isAddedCandidate = await CandidateManagementService.AddCandidate(candidatePersonModel.candidateViewModel);
        errorMessage = isAddedCandidate ? "Dodawanie kandydata sie powiodło!" : "Niepowodzenie w dodawaniu kandydata!";
        if(isAddedCandidate)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/candidatelist");
    }

    public void HandlePeselInput(ChangeEventArgs e)
    {
        var pesel = e.Value?.ToString();

        if (!string.IsNullOrEmpty(pesel) && pesel.Length >= 6 && IsPeselValid(pesel))
        {
            candidatePersonModel.personViewModel.DateOfBirthString = GetDateOfBirthFromPesel(pesel).ToString("yyyy-MM-dd");
        }
        else
        {
            candidatePersonModel.personViewModel.DateOfBirthString = string.Empty;
        }
    }

    private DateTime GetDateOfBirthFromPesel(string pesel)
    {
        int year = int.Parse(pesel.Substring(0, 2));
        int month = int.Parse(pesel.Substring(2, 2));
        int day = int.Parse(pesel.Substring(4, 2));

        if (month > 40)
        {
            year += 2100;
            month -= 40;
        }
        else if (month > 20)
        {
            year += 2000;
            month -= 20;
        }
        else
        {
            year += 1900;
        }

        return new DateTime(year, month, day);
    }

    private bool IsPeselValid(string pesel)
    {
        if (pesel.Length != 11 || !long.TryParse(pesel, out _))
        {
            return false;
        }

        int[] weights = { 1, 3, 7, 9, 1, 3, 7, 9, 1, 3 };
        int sum = 0;

        for (int i = 0; i < 10; i++)
        {
            sum += weights[i] * (pesel[i] - '0');
        }

        int controlDigit = (10 - (sum % 10)) % 10;

        return controlDigit == (pesel[10] - '0');
    }
}
