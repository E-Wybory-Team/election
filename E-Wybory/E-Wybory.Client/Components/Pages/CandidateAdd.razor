@page "/addcandidate"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using E_Wybory.Client.Services;
@using System.Globalization
@inject IPersonManagementService PersonManagementService
@inject ICandidateManagementService CandidateManagementService
@inject IDistrictManagementService DistrictManagementService
@inject IPartyManagementService PartyManagementService
@inject IElectionManagementService ElectionManagementService
@inject NavigationManager NavigationManager

<link href="forms.css" rel="stylesheet" />

<div class="candidate-form-container">
    <h1>DODAWANIE KANDYDATA W WYBORACH</h1>

    <EditForm FormName="CandidateAdd" Model="@candidatePersonModel"  OnValidSubmit="HandleAddCandidate" class="candidate-form">
        <DataAnnotationsValidator />
        <ValidationSummary/>

        <div class="form-row">
            <div class="form-group">
                <label for="name">IMIONA</label>
                <InputText id="name" @bind-Value="candidatePersonModel.personViewModel.Name" placeholder="Wprowadź imiona kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.Name)" />
            </div>
            <div class="form-group">
                <label for="lastName">NAZWISKO</label>
                <InputText id="lastName" @bind-Value="candidatePersonModel.personViewModel.Surname" placeholder="Wprowadź nazwisko kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.Surname)" />
            </div>
            <div class="form-group">
                <label for="birthDate">DATA URODZENIA</label>
                <InputText @bind-Value="candidatePersonModel.personViewModel.DateOfBirthString" type="date" placeholder="Wprowadź datę urodzenia kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.DateOfBirthString)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="pesel">PESEL</label>
                <InputText id="pesel" @bind-Value="candidatePersonModel.personViewModel.PESEL" placeholder="Wprowadź nr PESEL kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.personViewModel.PESEL)" />
            </div>
            <div class="form-group">
                <label for="occupation">ZAWÓD</label>
                <InputText id="occupation" @bind-Value="candidatePersonModel.candidateViewModel.JobType" placeholder="Wprowadź zawód kandydata" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.JobType)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="workplace">MIEJSCE PRACY</label>
                <InputText id="workplace" @bind-Value="candidatePersonModel.candidateViewModel.Workplace" placeholder="Wprowadź miejsce pracy kandydata" />
            </div>
            <div class="form-group">
                <label for="campaign">OPIS KAMPANII WYBORCZEJ</label>
                <InputText id="campaign" @bind-Value="candidatePersonModel.candidateViewModel.CampaignDescription" placeholder="Opisz kampanię wyborczą kandydata" />
            </div>
            <div class="form-group">
                <label for="listNumber">NUMER NA LIŚCIE</label>
                <InputNumber id="listNumber" @bind-Value="candidatePersonModel.candidateViewModel.PositionNumber" placeholder="Wprowadź numer na liście" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.PositionNumber)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="education">WYKSZTAŁCENIE</label>
                <InputSelect id="education" @bind-Value="candidatePersonModel.candidateViewModel.EducationStatus">
                    <option value="">Wybierz wykształcenie</option>
                    <option value="Podstawowe">Podstawowe</option>
                    <option value="Średnie">Średnie</option>
                    <option value="Wyższe">Wyższe</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="partyAffiliation">PRZYNALEŻNOŚĆ DO PARTII</label>
                <InputSelect id="partyAffiliation" @bind-Value="candidatePersonModel.candidateViewModel.IdParty">
                    <option value="">Wybierz partię</option>
                    @foreach (var party in parties)
                    {
                        <option value="@party.IdParty">
                            @party.PartyName
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="election">WYBORY</label>
                <InputSelect id="election" @bind-Value="candidatePersonModel.candidateViewModel.IdElection">
                    <option value="">Wybierz wybory</option>
                    @foreach (var election in elections)
                    {
                        <option value="@election.IdElection">
                            @election.ElectionStartDate - @election.ElectionEndDate;
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.IdElection)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="placeOfResidence">MIEJSCE ZAMIESZKANIA</label>
                <InputText id="placeOfResidence" @bind-Value="candidatePersonModel.candidateViewModel.PlaceOfResidence" placeholder="Wprowadź miejscowość zamieszkania" />
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.PlaceOfResidence)" />
            </div>
            <div class="form-group">
                <label for="districtNumber">OBWÓD WYBORCZY</label>
                <InputSelect id="districtNumber" @bind-Value="candidatePersonModel.candidateViewModel.IdDistrict">
                    <option value="">Wybierz obwód wyborczy</option>
                    @foreach (var district in districts)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidatePersonModel.candidateViewModel.IdDistrict)" />
            </div>
        </div>
        <div class="form-row">
            <button type="submit" class="submit-button">DODAJ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private List<ElectionViewModel> elections = new List<ElectionViewModel>();

    private CandidatePersonViewModel candidatePersonModel = new CandidatePersonViewModel();

    bool isAddedPerson = false;
    bool isAddedCandidate = false;
    string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        districts = await DistrictManagementService.Districts();
        parties = await PartyManagementService.Parties();
        elections = await ElectionManagementService.Elections();
    }


    private async Task HandleAddCandidate()
    {
        int index = await PersonManagementService.GetPersonIdByPeselAsync(candidatePersonModel.personViewModel.PESEL); //check if person exists
        Console.WriteLine("Index of person: " + index);

        if(index == 0) //if person with this PESEL not found
        {
            isAddedPerson = await PersonManagementService.AddPerson(candidatePersonModel.personViewModel);
            index = await PersonManagementService.GetPersonIdByPeselAsync(candidatePersonModel.personViewModel.PESEL);

        }
        candidatePersonModel.candidateViewModel.IdPerson = index;
        isAddedCandidate = await CandidateManagementService.AddCandidate(candidatePersonModel.candidateViewModel);
        errorMessage = isAddedCandidate ? "Candidate added successful!" : "Adding of candidate fails";
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/candidatelist");
    }
}
