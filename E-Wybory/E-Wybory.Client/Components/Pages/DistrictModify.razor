@page "/modifydistrict/{districtId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.FilterData
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IConstituencyManagementService ConstituencyManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject IDistrictManagementService DistrictManagementService
@inject IVoivodeshipManagementService VoivodeshipManagementService

<link href="forms.css" rel="stylesheet" />

<div class="form-container">
    <h1>MODYFIKOWANIE OBWODU WYBORCZEGO</h1>

    <EditForm FormName="districtModify" Model="@districtModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <!--
        <div>
            <div class="filter-group">
                <label>Obwód do edycji</label>
                <select @bind="@districtModel.IdDistrict">
                    <option value="">Wybierz obwód</option>
                    @foreach (var district in districts)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                </select>
                <ValidationMessage For="@(() => districtModel.IdDistrict)" />
            </div>
        </div> -->

        <div class="form-group">
            <label for="districtName">NAZWA OBWODU</label>
            <InputText @bind-Value="districtModel.DistrictName" id="districtName" placeholder="Nazwa obwodu wyborczego" />
            <ValidationMessage For="@(() => districtModel.DistrictName)" />
        </div>

        <div>
            <label for="disabledFacilities">WYPOSAŻENIE DLA NIEPEŁNOSPRAWNYCH</label>
            <input type="checkbox" id="disabledFacilities" @bind="districtModel.DisabledFacilities" />
            @if (districtModel.DisabledFacilities)
            {
                <span>Tak</span>
            }
            else
            {
                <span>Nie</span>
            }
        </div>


        <div class="form-group">
            <label for="districtHead">SIEDZIBA OBWODU</label>
            <InputText @bind-Value="districtModel.DistrictHeadquarters" id="districtHead" placeholder="Siedziba obwodu wyborczego" />
            <ValidationMessage For="@(() => districtModel.DistrictHeadquarters)" />
        </div>

        <div>
            <div class="filter-group">
                <label>Województwo</label>
                <select @bind="@SelectedVoivodeshipId" @bind:after="@OnVoivodeshipChanged">
                    <option value="">Wybierz województwo</option>
                    @foreach (var voivodeship in wrapper.VoivodeshipFilter)
                    {
                        <option value="@voivodeship.idVoivodeship">
                            @voivodeship.voivodeshipName
                        </option>
                    }
                </select>
            </div>
            <div class="filter-group">
                <label>Powiat</label>
                <select @bind="@SelectedCountyId" @bind:after="@OnCountyChanged">
                    <option value="">Wybierz powiat</option>
                    @foreach (var county in wrapper.CountyFilter)
                    {
                        @if (county.IdVoivodeship == SelectedVoivodeshipId)
                        {
                            <option value="@county.IdCounty">
                                @county.CountyName
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="filter-group">
                <label>Gmina</label>
                <select @bind="@SelectedProvinceId" @bind:after="@OnProvinceChanged">
                    <option value="">Wybierz gminę</option>
                    @foreach (var province in wrapper.ProvinceFilter)
                    {
                        @if (province.IdCounty == SelectedCountyId)
                        {
                            <option value="@province.IdProvince">
                                @province.ProvinceName
                            </option>
                        }
                    }
                </select>
            </div>
        </div>
        <div>
            <label>Okręg</label>
            <select @bind="districtModel.IdConstituency">
                <option value="">Wybierz okręg</option>
                @foreach (var constituency in constituencies)
                {
                    <option value="@constituency.idConstituency">
                        @constituency.constituencyName
                    </option>
                }
            </select>
            <ValidationMessage For="@(() => districtModel.IdConstituency)" />
        </div>

        <button type="submit" class="submit-button">ZATWIERDŹ ZMIANY</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    [Parameter]
    public int districtId { get; set; }

    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;

    private DistrictViewModel districtModel = new DistrictViewModel();
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<ConstituencyViewModel> constituencies = new List<ConstituencyViewModel>();
    private FilterListWrapper wrapper = new FilterListWrapper();

    bool isModifiedDistrict = false;
    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!await DistrictManagementService.DistrictExists(districtId))
        {
            errorMessage = "District not found";
            NavigationManager.NavigateTo("/districtlist");
        }
        else
        {
            districtModel = await DistrictManagementService.GetDistrictById(districtId);
            districts = await DistrictManagementService.Districts();
            wrapper.VoivodeshipFilter = await VoivodeshipManagementService.Voivodeships();
            constituencies = await ConstituencyManagementService.Constituences();
        }
    }

    private async void HandleSubmit()
    {
        districtModel.IdProvince = SelectedProvinceId;
        isModifiedDistrict = await DistrictManagementService.PutDistrict(districtModel);
        errorMessage = isModifiedDistrict ? "District edition successful!" : "District edition fails";
    }

    private async Task FilterRegions()
    {
        wrapper = await FilterWrapperService.GetFilteredLists(SelectedVoivodeshipId, SelectedCountyId);
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;

        await FilterRegions();
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;

        await FilterRegions();
    }

    private async Task OnProvinceChanged()
    {
        await FilterRegions();
    }

}
