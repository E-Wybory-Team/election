@page "/DetailedStats"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.FilterData
@using E_Wybory.Client.ViewModels
@inject IPartyManagementService PartyManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject IElectionManagementService ElectionManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject IVoteManagementService VoteManagementService
@inject ICandidateManagementService CandidateManagementService
<link href="tables.css" rel="stylesheet" />

<h2 class="title">WYNIKI WYBORÓW</h2>

<div class="filters">
    <div class="filter-group">
        <label>Rodzaj wyborów</label>
        <select @bind="@SelectedElectionTypeId" @bind:after="@OnElectionTypeChanged">
            <option value="">Wybierz rodzaj wyborów</option>
            @foreach (var electionType in wrapper.ElectionFilter)
            {
                <option value="@electionType.IdElectionType">
                    @electionType.ElectionTypeName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Województwo</label>
        <select @bind="@SelectedVoivodeshipId" @bind:after="@OnVoivodeshipChanged">
            <option value="">Wybierz województwo</option>
            @foreach (var voivodeship in wrapper.FilterListWrapper.VoivodeshipFilter)
            {
                <option value="@voivodeship.idVoivodeship">
                    @voivodeship.voivodeshipName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Powiat</label>
        <select @bind="@SelectedCountyId" @bind:after="@OnCountyChanged">
            <option value="">Wybierz powiat</option>
            @foreach (var county in wrapper.FilterListWrapper.CountyFilter)
            {
                @if (county.IdVoivodeship == SelectedVoivodeshipId)
                {
                    <option value="@county.IdCounty">
                        @county.CountyName
                    </option>
                }
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Gmina</label>
        <select @bind="@SelectedProvinceId" @bind:after="@OnProvinceChanged">
            <option value="">Wybierz gminę</option>
            @foreach (var province in wrapper.FilterListWrapper.ProvinceFilter)
            {
                @if (province.IdCounty == SelectedCountyId)
                {
                    <option value="@province.IdProvince">
                        @province.ProvinceName
                    </option>
                }
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Numer obwodu</label>
        <select @bind="@SelectedDistrictId" @bind:after="@OnDistrictChanged">
            <option value="">Wybierz numer obwodu</option>
            @foreach (var district in wrapper.FilterListWrapper.DistrictFilter)
            {
                @if (district.IdProvince == SelectedProvinceId)
                {
                    <option value="@district.IdDistrict">
                        @district.DistrictName - @district.DistrictHeadquarters
                    </option>
                }
            }
        </select>
    </div>
</div>

@if (string.IsNullOrEmpty(errorMessage) && newestElection.IdElection != 0)
{
    <h2>Wybory @newestElectionTypeName z dnia: @newestElection.ElectionStartDate.ToString("dd.MM.yyyy")</h2>

<table class="candidate-table">
    <thead>
        <tr>
            <th>Numer na karcie do głosowania</th>
            <th>Nazwisko i imiona</th>
            <th>Miejscowość zamieszkania</th>
            <th>Wykształcenie</th>
            <th>Wiek</th>
            <th>Przynależność do partii politycznej</th>
            <th>Liczba głosów na kandydata</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var candidate in filteredCandidates)
        {
            var partyName = String.Empty;
            var age = PersonManagementService.CountPersonAge(candidate.personViewModel.BirthDate);

            if (candidate.candidateViewModel.IdParty != 0 && candidate.candidateViewModel.IdParty != null)
                partyName = PartyManagementService.GetPartyNameById(candidate.candidateViewModel.IdParty.Value, parties);

            <tr>
                <td>@candidate.candidateViewModel.PositionNumber</td>
                <td>@candidate.personViewModel.Surname @candidate.personViewModel.Name</td>
                <td>@candidate.candidateViewModel.PlaceOfResidence</td>
                <td>@candidate.candidateViewModel.EducationStatus</td>
                <td>@age</td>
                <td>@partyName</td>
                <td>@votesNumberOfCandidates[candidate.candidateViewModel.IdCandidate]</td>
            </tr>
        }
    </tbody>
</table>
}

else
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private int? SelectedElectionTypeId { get; set; } = null;
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;
    private int? SelectedDistrictId { get; set; } = null;
    private string errorMessage = String.Empty;
    private string newestElectionTypeName = String.Empty;

    private List<CandidatePersonViewModel> filteredCandidates = new List<CandidatePersonViewModel>();
    private FilterListWrapperFull wrapper = new FilterListWrapperFull();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private ElectionViewModel newestElection = new ElectionViewModel();
    private Dictionary<int, int> votesNumberOfCandidates = new Dictionary<int, int>();


    private async Task FilterTable(bool toMakeCalculations) //parameter is introduces in order to limit calculations with server
    {
        wrapper = await FilterWrapperService.GetFilteredLists(SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
        if (newestElection.IdElection != 0) //only if was found
        {
                newestElectionTypeName = ElectionTypeManagementService.GetElectionTypeNameById(SelectedElectionTypeId.Value, wrapper.ElectionFilter);
                filteredCandidates.Clear();
                if (toMakeCalculations)
                {
                var currentDistricts = await FilterWrapperService.GetFilteredDistricts(null, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
                foreach(var district in currentDistricts)
                {
                    var districtCandidates = await FilterWrapperService.GetFilteredCandidatesFromElectionRegions(newestElection.IdElection, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId, district.IdDistrict);

                    if (districtCandidates.Count() > 0)
                    {
                        foreach (var candidate in districtCandidates)
                        {
                            var votesNumber = 0;
                            try
                            {
                                votesNumber = await VoteManagementService.GetVotesNumberByDistrictCandidate(district.IdDistrict, newestElection.IdElection, candidate.candidateViewModel.IdCandidate);
                            }
                            catch (Exception ex)
                            {
                            }
                            if (votesNumberOfCandidates.ContainsKey(candidate.candidateViewModel.IdCandidate))
                            {
                                votesNumberOfCandidates[candidate.candidateViewModel.IdCandidate] = votesNumber;
                            }
                            else
                            {
                                votesNumberOfCandidates.Add(candidate.candidateViewModel.IdCandidate, votesNumber);
                            }

                        }
                    }
                    foreach (var districtCandidate in districtCandidates)
                    {
                        if(!CandidateManagementService.IfCandidateListHasCandidate(districtCandidate.candidateViewModel.IdCandidate, filteredCandidates))
                        {
                            filteredCandidates.Add(districtCandidate);
                        }
                    }
                }
            }

            errorMessage = String.Empty;
        }
        else
        {
            errorMessage = "Nie znaleziono wyborów tego typu, które się odbyły!";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //filteredCandidates = await FilterWrapperService.GetFilteredCandidates(SelectedElectionTypeId, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId, SelectedDistrictId);
        wrapper.ElectionFilter = await ElectionTypeManagementService.ElectionTypes();
        parties = await PartyManagementService.Parties();
        errorMessage = "Proszę wybrać typ wyborów!";
    }

    private async Task OnElectionTypeChanged()
    {
        if(SelectedElectionTypeId != null && SelectedElectionTypeId != 0)
        {
            newestElection = await ElectionManagementService.GetNewestElectionOfElectionType(SelectedElectionTypeId.Value);
            await FilterTable(false);
        }
        SelectedVoivodeshipId = null;
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterTable(false);
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterTable(false);
    }

    private async Task OnProvinceChanged()
    {
        SelectedDistrictId = null;

        await FilterTable(false);
    }

    private async Task OnDistrictChanged()
    {
        await FilterTable(true);
    }

}
