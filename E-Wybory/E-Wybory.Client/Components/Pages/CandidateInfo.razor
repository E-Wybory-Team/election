@page "/candidateInfo"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using E_Wybory.Client.Services;
@inject IPartyManagementService PartyManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@using FilterData;

<link href="tables.css" rel="stylesheet"/>

<h2 class="title">SPIS KANDYDATÓW</h2>

<div class="filters">
    <div class="filter-group">
        <label>Rodzaj wyborów</label>
        <select @bind="@SelectedElectionTypeId" id="rodzaj-wyborow" @bind:after="@OnElectionTypeChanged">
            <option value="">Wybierz rodzaj wyborów</option>
            @foreach (var electionType in wrapper.ElectionFilter)
            {
                <option value="@electionType.IdElectionType">
                    @electionType.ElectionTypeName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Województwo</label>
        <select @bind="@SelectedVoivodeshipId" id="wojewodztwo" @bind:after="@OnVoivodeshipChanged">
            <option value="">Wybierz województwo</option>
            @foreach (var voivodeship in wrapper.FilterListWrapper.VoivodeshipFilter)
            {
                <option value="@voivodeship.idVoivodeship">
                    @voivodeship.voivodeshipName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Powiat</label>
        <select @bind="@SelectedCountyId" id="powiat" @bind:after="@OnCountyChanged">
            <option value="">Wybierz powiat</option>
            @foreach (var county in wrapper.FilterListWrapper.CountyFilter)
            {
                @if (county.IdVoivodeship == SelectedVoivodeshipId)
                {
                    <option value="@county.IdCounty">
                        @county.CountyName
                </option>
                }
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Gmina</label>
        <select @bind="@SelectedProvinceId" id="gmina" @bind:after="@OnProvinceChanged">
            <option value="">Wybierz gminę</option>
            @foreach (var province in wrapper.FilterListWrapper.ProvinceFilter)
            {
                @if (province.IdCounty == SelectedCountyId)
                {
                    <option value="@province.IdProvince">
                        @province.ProvinceName
                    </option>
                }
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Numer obwodu</label>
        <select @bind="@SelectedDistrictId" id="numer-obwodu" @bind:after="@OnDistrictChanged">
            <option value="">Wybierz numer obwodu</option>
            @foreach (var district in wrapper.FilterListWrapper.DistrictFilter)
            {
                @if (district.IdProvince == SelectedProvinceId)
                {
                    <option value="@district.IdDistrict">
                        @district.DistrictName - @district.DistrictHeadquarters
                    </option>
                }
            }
        </select>
    </div>
</div>

<table class="candidate-table">
    <thead>
        <tr>
            <th>Numer na karcie do głosowania</th>
            <th>Nazwisko i imiona</th>
            <th>Zawód</th>
            <th>Miejsce (zakład) pracy</th>
            <th>Miejscowość zamieszkania</th>
            <th>Wykształcenie</th>
            <th>Wiek</th>
            <th>Przynależność do partii politycznej</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var candidate in filteredCandidates)
        {
            var partyName = String.Empty;
            var age = PersonManagementService.CountPersonAge(candidate.personViewModel.BirthDate);

            if (candidate.candidateViewModel.IdParty != 0 && candidate.candidateViewModel.IdParty != null)
                partyName = PartyManagementService.GetPartyNameById(candidate.candidateViewModel.IdParty.GetValueOrDefault(), parties);

            <tr>
                <td>@candidate.candidateViewModel.PositionNumber</td>
                <td>@candidate.personViewModel.Surname @candidate.personViewModel.Name</td>
                <td>@candidate.candidateViewModel.JobType</td>
                <td>@candidate.candidateViewModel.Workplace</td>
                <td>@candidate.candidateViewModel.PlaceOfResidence</td>
                <td>@candidate.candidateViewModel.EducationStatus</td>
                <td>@age</td>
                <td>@partyName</td>
            </tr>
            
        }
    </tbody>
</table>

@code {

    private int? SelectedElectionTypeId { get; set; } = null;
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;
    private int? SelectedDistrictId { get; set; } = null;

    private List<CandidatePersonViewModel> filteredCandidates = new List<CandidatePersonViewModel>();
    private FilterListWrapperFull wrapper = new FilterListWrapperFull();
    private List<PartyViewModel> parties = new List<PartyViewModel>();

    protected override async Task OnInitializedAsync()
    {
        //it must be executed here because every parameters at the beginning are null
        wrapper.ElectionFilter = await ElectionTypeManagementService.ElectionTypes();
        parties = await PartyManagementService.Parties();
    }


    private async Task FilterCandidate(bool toFilterCandidates)
    {
        wrapper = await FilterWrapperService.GetFilteredLists(SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
        filteredCandidates.Clear();
        if(toFilterCandidates)
        {
        filteredCandidates = await FilterWrapperService.GetFilteredCandidates(SelectedElectionTypeId, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId, SelectedDistrictId);
        }
    }

    private async Task OnElectionTypeChanged()
    {
        SelectedVoivodeshipId = null;
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterCandidate(false);
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;      
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterCandidate(false);
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;   
        SelectedDistrictId = null;

        await FilterCandidate(false);  
    }

    private async Task OnProvinceChanged()
    {
        SelectedDistrictId = null;   

        await FilterCandidate(false); 
    }

    private async Task OnDistrictChanged()
    {
        await FilterCandidate(true); 
    }







}
