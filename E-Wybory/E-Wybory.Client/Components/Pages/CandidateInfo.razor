@page "/candidateInfo"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using E_Wybory.Client.Services;
@inject IPartyManagementService PartyManagementService
@inject ICandidateManagementService CandidateManagementService
@inject IDistrictManagementService DistrictManagementService
@inject IVoivodeshipManagementService VoivodeshipManagementService
@inject IPersonManagementService PersonManagementService

<link href="tables.css" rel="stylesheet"/>

<h2 class="title">SPIS KANDYDATÓW</h2>

<div class="filters">
    <div class="filter-group">
        <label>Rodzaj wyborów</label>
        <select @onchange="(e) => FilterTable()">
            <option value="">Wybierz rodzaj wyborów</option>
            @foreach (var electionType in electionTypes)
            {
                <option value="@electionType">@electionType</option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Województwo</label>
        <select @onchange="(e) => FilterTable()">
            <option value="">Wybierz województwo</option>
            @foreach (var voivodeship in voivodeships)
            {
                <option value="@voivodeship.idVoivodeship">
                    @voivodeship.voivodeshipName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Powiat</label>
        <select @onchange="(e) => FilterTable()">
            <option value="">Wybierz powiat</option>
            @foreach (var county in counties)
            {
                <option value="@county">@county</option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Gmina</label>
        <select @onchange="(e) => FilterTable()">
            <option value="">Wybierz gminę</option>
            @foreach (var province in provinces)
            {
                <option value="@province">@province</option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Numer obwodu</label>
        <select @onchange="(e) => FilterTable()">
            <option value="">Wybierz numer obwodu</option>
            @foreach (var district in districts)
            {
                <option value="@district.IdDistrict">
                    @district.DistrictName - @district.DistrictHeadquarters
                </option>
            }
        </select>
    </div>
</div>

<table class="candidate-table">
    <thead>
        <tr>
            <th>Numer na karcie do głosowania</th>
            <th>Nazwisko i imiona</th>
            <th>Zawód</th>
            <th>Miejsce (zakład) pracy</th>
            <th>Miejscowość zamieszkania</th>
            <th>Wykształcenie</th>
            <th>Wiek</th>
            <th>Przynależność do partii politycznej</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var candidate in candidates)
        {
            var person = GetPersonById(candidate.IdPerson);
            var age = CountPersonAge(person.BirthDate);
            var partyName = String.Empty;

            if (candidate.IdParty != 0 && candidate.IdParty != null)
                partyName = GetPartyNameById(candidate.IdParty.GetValueOrDefault());

            <tr>
                <td>@candidate.PositionNumber</td>
                <td>@person.Surname @person.Name</td>
                <td>@candidate.JobType</td>
                <td>@candidate.Workplace</td>
                <td>@candidate.PlaceOfResidence</td>
                <td>@candidate.EducationStatus</td>
                <td>@age</td>
                <td>@partyName</td>
            </tr>
            
        }
    </tbody>
</table>

@code {

    private CandidateViewModel candidate = new CandidateViewModel();
    // tutaj poniżej musiałyby iść GET'y do bazy żeby pobierać to
    private List<CandidateViewModel> candidates = new List<CandidateViewModel>();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<VoivodeshipViewModel> voivodeships = new List<VoivodeshipViewModel>();
    private List<PersonViewModel> people = new List<PersonViewModel>();

    private List<string> electionTypes = new() { "Wybory samorządowe", "Wybory prezydenckie", "Wybory parlamentarne" };
    private List<string> counties = new() { "Powiat 1", "Powiat 2", "Powiat 3" };
    private List<string> provinces = new() { "Gmina 1", "Gmina 2", "Gmina 3" };




    private void FilterTable()
    {

        // To tylko mockowanie więc tu trzeba będzie zrobić jakąś logikę do filtrowania pewnie z jakąś metodą kontrolera, która będzie wykonywać jakiegoś SQL na bazie
    }

    protected override async Task OnInitializedAsync()
    {
        candidates = await CandidateManagementService.Candidates();
        districts = await DistrictManagementService.Districts();
        parties = await PartyManagementService.Parties();
        voivodeships = await VoivodeshipManagementService.Voivodeships();
        people = await PersonManagementService.People();
    }

    private PersonViewModel? GetPersonById(int id)
    {
        return people.FirstOrDefault(person => person.IdPerson == id);
    }

    private int CountPersonAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;

        // Adjust if the birthdate hasn't occurred yet this year
        if (birthDate.Date > today.AddYears(-age))
        {
            age--;
        }

        return age;
    }

    private string? GetPartyNameById(int partyId)
    {
        var party = parties
            .Where(p => p.IdParty == partyId)
            .Select(p => p.PartyName)
            .FirstOrDefault();

        return party;
    }

}
