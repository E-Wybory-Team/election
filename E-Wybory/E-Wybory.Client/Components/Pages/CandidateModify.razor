@page "/modify-candidate"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms

@inject IPartyManagementService PartyManagementService
@inject IDistrictManagementService DistrictManagementService
@inject ICandidateManagementService CandidateManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionManagementService ElectionManagementService

<link href="forms.css" rel="stylesheet" />

<div class="form-container">
    <h1>MODYFIKOWANIE KANDYDATA W WYBORACH</h1>

    <EditForm FormName="CandidateModify" Model="@candidateModel" OnValidSubmit="HandleEditCandidate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="currentCandidate">KANDYDAT DO EDYCJI</label>
            <InputSelect id="currentCandidate" @bind-Value="SelectedCandidateId">
                <option value="">Wybierz kandydata</option>
                @foreach (var candidate in candidates)
                {
                    <option value="@candidate.IdCandidate">
                        @candidate.IdCandidate - @candidateNames[candidate.IdPerson]
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => candidateModel.candidateViewModel.IdCandidate)" />
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="firstName">IMIĘ</label>
                <InputText id="firstName" @bind-Value="candidateModel.personViewModel.Name" placeholder="Wprowadź imię kandydata" />
                <ValidationMessage For="@(() => candidateModel.personViewModel.Name)" />
            </div>
            <div class="form-group">
                <label for="lastName">NAZWISKO</label>
                <InputText id="lastName" @bind-Value="candidateModel.personViewModel.Surname" placeholder="Wprowadź nazwisko kandydata" />
                <ValidationMessage For="@(() => candidateModel.personViewModel.Surname)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="pesel">PESEL</label>
                <InputText id="pesel" @bind-Value="candidateModel.personViewModel.PESEL" placeholder="Wprowadź nr PESEL kandydata" />
                <ValidationMessage For="@(() => candidateModel.personViewModel.PESEL)" />
            </div>
            <div class="form-group">
                <label for="dateBirth">DATA URODZENIA</label>
                <InputText id="dateBirth" @bind-Value="candidateModel.personViewModel.DateOfBirthString" type="date" placeholder="Wprowadź zawód kandydata" />
                <ValidationMessage For="@(() => candidateModel.personViewModel.DateOfBirthString)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="occupation">ZAWÓD</label>
                <InputText id="occupation" @bind-Value="candidateModel.candidateViewModel.JobType" placeholder="Wprowadź zawód kandydata" />
                <ValidationMessage For="@(() => candidateModel.candidateViewModel.JobType)" />
            </div>
            <div class="form-group">
                <label for="workplace">MIEJSCE PRACY</label>
                <InputText id="workplace" @bind-Value="candidateModel.candidateViewModel.Workplace" placeholder="Wprowadź miejsce pracy kandydata" />
            </div>
            <div class="form-group">
                <label for="campaign">OPIS KAMPANII</label>
                <InputText id="campaign" @bind-Value="candidateModel.candidateViewModel.CampaignDescription" placeholder="Wprowadź opis kampanii wyborczej kandydata" />
            </div>
            <div class="form-group">
                <label for="listNumber">NUMER NA LIŚCIE</label>
                <InputNumber id="listNumber" @bind-Value="candidateModel.candidateViewModel.PositionNumber" placeholder="Wprowadź numer na liście" />
                <ValidationMessage For="@(() => candidateModel.candidateViewModel.PositionNumber)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="education">WYKSZTAŁCENIE</label>
                <InputSelect id="education" @bind-Value="candidateModel.candidateViewModel.EducationStatus">
                    <option value="">Wybierz wykształcenie</option>
                    <option value="Podstawowe">Podstawowe</option>
                    <option value="Średnie">Średnie</option>
                    <option value="Wyższe">Wyższe</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="partyAffiliation">PRZYNALEŻNOŚĆ DO PARTII</label>
                <InputSelect id="partyAffiliation" @bind-Value="candidateModel.candidateViewModel.IdParty">
                    <option value="">Wybierz partię</option>
                    @foreach (var party in parties)
                    {
                        <option value="@party.IdParty">
                            @party.PartyName
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="election">WYBORY</label>
                <InputSelect id="election" @bind-Value="candidateModel.candidateViewModel.IdElection">
                    <option value="">Wybierz instancję wyborów</option>
                    @foreach (var election in elections)
                    {
                        <option value="@election.IdElection">
                            Od:  @election.ElectionStartDate  do:  @election.ElectionEndDate
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidateModel.candidateViewModel.IdElection)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="placeOfResidence">MIEJSCE ZAMIESZKANIA</label>
                <InputText id="placeOfResidence" @bind-Value="candidateModel.candidateViewModel.PlaceOfResidence" placeholder="Wprowadź miejscowość zamieszkania" />
                <ValidationMessage For="@(() => candidateModel.candidateViewModel.PlaceOfResidence)" />
            </div>
            <div class="form-group">
                <label for="districtNumber">OBWÓD WYBORCZY</label>
                <InputSelect id="districtNumber" @bind-Value="candidateModel.candidateViewModel.IdDistrict">
                    <option value="">Wybierz obwód wyborczy</option>
                    @foreach (var district in districts)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => candidateModel.candidateViewModel.IdDistrict)" />
            </div>
        </div>

        <button type="submit" class="submit-button">ZATWIERDŹ ZMIANY</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private CandidatePersonViewModel candidateModel = new CandidatePersonViewModel();
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private List<CandidateViewModel> candidates = new List<CandidateViewModel>();
    private List<ElectionViewModel> elections = new List<ElectionViewModel>();
    private Dictionary<int, string> candidateNames = new();
    private int SelectedCandidateId { get; set; } = 0;
    string errorMessage;
    bool formSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        districts = await DistrictManagementService.Districts();
        parties = await PartyManagementService.Parties();
        candidates = await CandidateManagementService.Candidates();
        elections = await ElectionManagementService.Elections();
        await LoadAllCandidateNamesAsync();
    }

    private async Task LoadAllCandidateNamesAsync()
    {
        var nameTasks = candidates.Select(async candidate =>
        {
            var name = await PersonManagementService.GetPersonNameSurnameById(candidate.IdPerson);
            var partyName = PartyManagementService.GetPartyNameById(candidate.IdParty.GetValueOrDefault(), parties);
            candidateNames[candidate.IdPerson] = name + " - partia: " + partyName;
        });

        await Task.WhenAll(nameTasks);
    }

    private async void HandleEditCandidate()
    {
        if (SelectedCandidateId != 0) //only if is selected
        {
            candidateModel.candidateViewModel.IdCandidate = SelectedCandidateId;
            var personIdFromCandidate = candidates
                    .Where(p => p.IdCandidate == SelectedCandidateId)
                    .Select(p => p.IdPerson)
                    .FirstOrDefault();

            candidateModel.candidateViewModel.IdPerson = personIdFromCandidate;
            candidateModel.personViewModel.IdPerson = personIdFromCandidate;

            formSubmitted = await PersonManagementService.PutPerson(candidateModel.personViewModel);
            formSubmitted = formSubmitted && await CandidateManagementService.PutCandidate(candidateModel.candidateViewModel);

            errorMessage = formSubmitted ? "Candidate modified successful!" : "Candidate modification fails";
        }
    }


}
