@page "/account/enable-2fa"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using System.Security.Claims
@using E_Wybory.Application.DTOs
@using E_Wybory.Application.Wrappers
@using Microsoft.AspNetCore.Components.Authorization

@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject UrlEncoder UrlEncoder
@inject NavigationManager NavigationManager
@* @inject IdentityRedirectManager RedirectManager
 *@
 @inject ILogger<EnableAuthenticator> Logger

<link href="forms.css" rel="stylesheet" />

<CascadingAuthenticationState>
    <AuthorizeView Context="authContext">
        <Authorized>

            <PageTitle>Skonfiguruj aplikację uwierzytelniającą</PageTitle>
            @if(is2faEnabled) @* (recoveryCodes is not null) *@
            {
                @*     <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" /> *@
                <div class="reset-button-container">
                    <button @onclick="OnReset2FAClick" class="btn btn-primary">Zresetuj konto na aplikacji 2FA</button>
                </div>
            
            }
            else
            {
                <div class="authenticator-form-container">
                    <h3 class="authenticator-header">Skonfiguruj aplikację uwierzytelniającą</h3>
                     <div class="authenticator-content">
                    <p class="authenticator-instructions">
                        Aby używać aplikacji uwierzytelniającej, wykonaj następujące kroki:
                    </p>
                    <ol>
                            <p class="authenticator-steps">
                                1. Pobierz aplikację uwierzytelniającą, taką jak Microsoft Authenticator dla
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> i
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> lub
                                Google Authenticator dla
                                <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> i
                                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
                            </p>
                        <p class="authenticator-steps">2. Zeskanuj kod QR lub wprowadź ten klucz <kbd>@sharedKey</kbd> do aplikacji.</p>
                    </ol>
                        @if (authenticatorUri is not null)
                        {
                            <div class="qr-code-container">
                                <QrCode authenticatorUri="@authenticatorUri" />
                            </div>
                        }
                    <ol>
                        <p class="authenticator-steps">3. Po zeskanowaniu kodu QR lub wprowadzeniu powyższego klucza, Twoja aplikacja uwierzytelniająca wygeneruje unikalny kod. Wprowadź kod w poniższym polu potwierdzenia a następnij wciśnij przycisk "Zweryfikuj".</p>
                    </ol>
                    <div class="authenticator-input-container">
                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Code" id="Input.Code" class="centered-input" placeholder="Kod weryfikacyjny" />
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="centered-button">Zweryfikuj</button>
                        </EditForm>
                    </div>
                </div>
                </div>

            }
            <StatusMessage Message="@message" />
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&algorithm=SHA1&digits=6&period=30";

    private string? message;
    private bool is2faEnabled = false;
    private UserWrapper user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;


    [SupplyParameterFromForm]
    private TwoFactorAuthVerifyRequest Input { get; set; } = new();

    private async Task OnReset2FAClick()
    {
        bool result = await AuthService.Reset2FAasync(user.Id);

        if(result)
            StateHasChanged();

        NavigationManager.NavigateTo("/account");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthStateProvider.GetAuthenticationStateAsync();

        user = new UserWrapper(result.User);

        if (!user.IsValid())
        {
            message = "Nie znaleziono użytkownika";
            return;
        }

        is2faEnabled = user.TwoFAenabled;
        if(!is2faEnabled)
            await LoadSharedKeyAndQrCodeUriAsync(user);
    }


    private async Task OnValidSubmitAsync()
    {
        Input.Code = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);
        Input.UserId = user.Id;
        var is2faTokenValid = await AuthService.VerifyTwoFactorTokenAsyncFirst(Input);

        if (!is2faTokenValid)
        {
            message = "Błędny kod weryfikacyjny";
            return;
        }

        Logger.LogInformation("Użytkownik o ID '{UserId}' włączył 2FA za pomocą aplikacji uwierzytelniającej.", user.Id);

        message = "Twoja aplikacja MFA została dodana";
        NavigationManager.NavigateTo("/account");
       
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(UserWrapper user)
    {
        var unformattedKey = await AuthService.GetAuthenticatorKeyAsync(user.Id);
       
        sharedKey = FormatKey(unformattedKey!);

        authenticatorUri = GenerateQrCodeUri(user, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }
        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(UserWrapper user, string unformattedKey)
    {
        return string.Format(CultureInfo.InvariantCulture, AuthenticatorUriFormat,
            UrlEncoder.Encode(user.Issuer!),
            UrlEncoder.Encode(user.Username!),
            unformattedKey);
    }
}