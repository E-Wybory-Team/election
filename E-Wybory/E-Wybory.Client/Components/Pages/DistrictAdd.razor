@page "/adddistrict"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.FilterData
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IConstituencyManagementService ConstituencyManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject IDistrictManagementService DistrictManagementService
@inject IVoivodeshipManagementService VoivodeshipManagementService
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Pracownicy PKW, Administratorzy" Context="authContext">
         <Authorized>
<div class="form-container">
    <h1>DODAWANIE OBWODU WYBORCZEGO</h1>

    <EditForm Model="@districtModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="form-group-smaller">
            <label for="districtName">NAZWA OBWODU</label>
            <InputText @bind-Value="districtModel.DistrictName" id="districtName" placeholder="Nazwa obwodu wyborczego" />
            <ValidationMessage For="@(() => districtModel.DistrictName)" />
        </div>

        <div class="form-group-smaller">
            <label for="disabledFacilities">WYPOSAŻENIE DLA NIEPEŁNOSPRAWNYCH</label>
            <div class="checkbox-group">
                <input type="checkbox" class="checkbox" id="disabledFacilities" @bind="districtModel.DisabledFacilities" />
                @if (districtModel.DisabledFacilities)
                {
                    <span>Tak</span>
                }
                else
                {
                    <span>Nie</span>
                }
            </div>
        </div>

        
        <div class="form-group-smaller">
            <label for="districtHead">SIEDZIBA OBWODU</label>
            <InputText @bind-Value="districtModel.DistrictHeadquarters" id="districtHead" placeholder="Siedziba obwodu wyborczego" />
            <ValidationMessage For="@(() => districtModel.DistrictHeadquarters)" />
        </div>

        <div class="form-group-smaller">
            <div class="form-group-smaller">
                <label>WOJEWÓDZTWO</label>
                <select @bind="@SelectedVoivodeshipId" @bind:after="@OnVoivodeshipChanged">
                    <option value="">Wybierz województwo</option>
                    @foreach (var voivodeship in wrapper.VoivodeshipFilter)
                    {
                        <option value="@voivodeship.idVoivodeship">
                            @voivodeship.voivodeshipName
                        </option>
                    }
                </select>
            </div>
            <div class="form-group-smaller">
                <label>POWIAT</label>
                <select @bind="@SelectedCountyId" @bind:after="@OnCountyChanged">
                    <option value="">Wybierz powiat</option>
                    @foreach (var county in wrapper.CountyFilter)
                    {
                        @if (county.IdVoivodeship == SelectedVoivodeshipId)
                        {
                            <option value="@county.IdCounty">
                                @county.CountyName
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="form-group-smaller">
                <label>GMINA</label>
                <select @bind="@SelectedProvinceId" @bind:after="@OnProvinceChanged">
                    <option value="">Wybierz gminę</option>
                    @foreach (var province in wrapper.ProvinceFilter)
                    {
                        @if (province.IdCounty == SelectedCountyId)
                        {
                            <option value="@province.IdProvince">
                                @province.ProvinceName
                            </option>
                        }
                    }
                </select>
            </div>
        <div class="form-group-smaller">
            <label>OKRĘG</label>
            <select @bind="districtModel.IdConstituency">
                <option value="">Wybierz okręg</option>
                @foreach (var constituency in constituencies)
                {
                    <option value="@constituency.idConstituency">
                        @constituency.constituencyName
                    </option>
                }
            </select>
            <ValidationMessage For="@(() => districtModel.IdConstituency)" />
        </div>
        </div>
        <div class="form-row">
            <button type="submit" class="submit-button">DODAJ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;

    private DistrictViewModel districtModel = new DistrictViewModel();
    private List<ConstituencyViewModel> constituencies = new List<ConstituencyViewModel>();
    private FilterListWrapper wrapper = new FilterListWrapper();

    bool isAddedDistrict = false;
    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated || (!user.IsInRole("Pracownicy PKW") && !user.IsInRole("Administratorzy")))
        {
            return;
        }

        wrapper.VoivodeshipFilter = await VoivodeshipManagementService.Voivodeships();
        constituencies = await ConstituencyManagementService.Constituences();
    }

    private async Task HandleSubmit()
    {
        districtModel.IdProvince = SelectedProvinceId;
        Console.WriteLine($"District attributes: {districtModel.DistrictName} - {districtModel.DistrictHeadquarters} - {districtModel.DisabledFacilities} - {districtModel.IdConstituency} - {districtModel.IdProvince}");
        isAddedDistrict = await DistrictManagementService.AddDistrict(districtModel);
        errorMessage = isAddedDistrict ? "Dodawanie obwodu udało się!" : "Niepowodzenie w dodawaniu obwodu!";
        if(isAddedDistrict)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }

    private async Task FilterRegions()
    {
        wrapper = await FilterWrapperService.GetFilteredLists(SelectedVoivodeshipId, SelectedCountyId);
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;

        await FilterRegions();
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;

        await FilterRegions();
    }

    private async Task OnProvinceChanged()
    {
        await FilterRegions();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/districtlist");
    }

}
