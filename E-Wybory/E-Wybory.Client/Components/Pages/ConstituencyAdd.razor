@page "/addconstituency"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using E_Wybory.Client.ViewModels
@inject NavigationManager NavigationManager
@inject IConstituencyManagementService ConstituencyManagementService

<link href="forms.css" rel="stylesheet" />

<div class="form-container">
    <h1>DODAWANIE OKRĘGU WYBORCZEGO</h1>

    <EditForm FormName="ConstituencyAdd" Model="constituencyModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="constituencyName">NAZWA OKRĘGU</label>
            <InputText id="constituencyName" @bind-Value="constituencyModel.constituencyName" placeholder="Nazwa okręgu wyborczego" />
            <ValidationMessage For="@(() => constituencyModel.constituencyName)" />
        </div>

        <div class="form-row">
    <button type="submit" class="submit-button">DODAJ</button>
    <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private ConstituencyViewModel constituencyModel = new ConstituencyViewModel();
    bool isAddedConstituency = false;
    string errorMessage;


    public async Task<HashSet<string>> GetSelections(ElementReference elementReference)
    {
        return (await JS.InvokeAsync<List<string>>("getSelectedValues", _selectReference)).ToHashSet();
    }

    private async void HandleSubmit()
    {
        isAddedConstituency = await ConstituencyManagementService.AddConstituency(constituencyModel);
        errorMessage = isAddedConstituency ? "Adding constituency successful!" : "Adding constituency fails";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/constituencylist");
    }

}
