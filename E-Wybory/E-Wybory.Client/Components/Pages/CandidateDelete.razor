@page "/deletecandidate/{candidateId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IPartyManagementService PartyManagementService
@inject IDistrictManagementService DistrictManagementService
@inject ICandidateManagementService CandidateManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionManagementService ElectionManagementService

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Pracownicy PKW, Administratorzy" Context="authContext">
         <Authorized>
<div class="candidate-form-container">
    <h1>POTWIERDŹ USUNIĘCIE KANDYDATA</h1>

    <EditForm FormName="CandidateDelete" Model="@candidateModel" OnValidSubmit="HandleDeleteCandidate" class="candidate-form">
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="form-group">
                <label for="firstName">IMIĘ</label>
                <InputText id="firstName" @bind-Value="candidateModel.personViewModel.Name" readonly placeholder="Wprowadź imię kandydata" />
            </div>
            <div class="form-group">
                <label for="lastName">NAZWISKO</label>
                <InputText id="lastName" @bind-Value="candidateModel.personViewModel.Surname" readonly placeholder="Wprowadź nazwisko kandydata" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="pesel">PESEL</label>
                <InputText id="pesel" @bind-Value="candidateModel.personViewModel.PESEL" readonly placeholder="Wprowadź nr PESEL kandydata" />
            </div>
            <div class="form-group">
                <label for="dateBirth">DATA URODZENIA</label>
                <InputText id="dateBirth" @bind-Value="candidateModel.personViewModel.DateOfBirthString" type="date" readonly placeholder="Wprowadź zawód kandydata" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="occupation">ZAWÓD</label>
                <InputText id="occupation" @bind-Value="candidateModel.candidateViewModel.JobType" readonly placeholder="Wprowadź zawód kandydata" />
            </div>
            <div class="form-group">
                <label for="workplace">MIEJSCE PRACY</label>
                <InputText id="workplace" @bind-Value="candidateModel.candidateViewModel.Workplace" readonly placeholder="Wprowadź miejsce pracy kandydata" />
            </div>
            <div class="form-group">
                <label for="campaign">OPIS KAMPANII</label>
                <InputText id="campaign" @bind-Value="candidateModel.candidateViewModel.CampaignDescription" readonly placeholder="Wprowadź opis kampanii wyborczej kandydata" />
            </div>
            <div class="form-group">
                <label for="listNumber">NUMER NA LIŚCIE</label>
                <InputNumber id="listNumber" @bind-Value="candidateModel.candidateViewModel.PositionNumber" readonly placeholder="Wprowadź numer na liście" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="education">WYKSZTAŁCENIE</label>
                <InputSelect id="education" @bind-Value="candidateModel.candidateViewModel.EducationStatus" disabled>
                    <option value="">Wybierz wykształcenie</option>
                    <option value="Podstawowe">Podstawowe</option>
                    <option value="Średnie">Średnie</option>
                    <option value="Wyższe">Wyższe</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="partyAffiliation">PRZYNALEŻNOŚĆ DO PARTII</label>
                <InputSelect id="partyAffiliation" @bind-Value="candidateModel.candidateViewModel.IdParty" disabled>
                    <option value="">Wybierz partię</option>
                    @foreach (var party in parties)
                    {
                        <option value="@party.IdParty">
                            @party.PartyName
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="election">WYBORY</label>
                <InputSelect id="election" @bind-Value="candidateModel.candidateViewModel.IdElection" disabled>
                    <option value="">Wybierz instancję wyborów</option>
                    @foreach (var election in elections)
                    {
                        <option value="@election.IdElection">
                            Od: @election.ElectionStartDate do: @election.ElectionEndDate
                        </option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="placeOfResidence">MIEJSCE ZAMIESZKANIA</label>
                <InputText id="placeOfResidence" @bind-Value="candidateModel.candidateViewModel.PlaceOfResidence" readonly placeholder="Wprowadź miejscowość zamieszkania" />
            </div>
            <div class="form-group">
                <label for="districtNumber">OBWÓD WYBORCZY</label>
                <InputSelect id="districtNumber" @bind-Value="candidateModel.candidateViewModel.IdDistrict" disabled>
                    <option value="">Wybierz obwód wyborczy</option>
                    @foreach (var district in districts)
                    {
                        <option value="@district.IdDistrict">
                            @district.DistrictName - @district.DistrictHeadquarters
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="form-row">
            <button type="submit" class="red-submit-button">USUŃ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>
                     </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    [Parameter]
    public int candidateId { get; set; }

    private CandidatePersonViewModel candidateModel = new CandidatePersonViewModel();
    private List<DistrictViewModel> districts = new List<DistrictViewModel>();
    private List<PartyViewModel> parties = new List<PartyViewModel>();
    private List<CandidateViewModel> candidates = new List<CandidateViewModel>();
    private List<ElectionViewModel> elections = new List<ElectionViewModel>();
    private Dictionary<int, string> candidateNames = new();
    string errorMessage;
    bool formSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        if (!await CandidateManagementService.CandidateExists(candidateId))
        {
            errorMessage = "Nie znaleziono takiego kandydata!";
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
        else
        {
            candidateModel.candidateViewModel = await CandidateManagementService.GetCandidateById(candidateId);
            candidateModel.personViewModel = await PersonManagementService.GetPersonById(candidateModel.candidateViewModel.IdPerson);
            districts = await DistrictManagementService.Districts();
            parties = await PartyManagementService.Parties();
            candidates = await CandidateManagementService.Candidates();
            elections = await ElectionManagementService.Elections();
        }
    }


    private async void HandleDeleteCandidate()
    {
        formSubmitted = await CandidateManagementService.DeleteCandidate(candidateId);
        //formSubmitted = formSubmitted && await CandidateManagementService.PutCandidate(candidateModel.candidateViewModel);
        errorMessage = formSubmitted ? "Kandydat usunięty pomyślnie!" : "Nie udało się usunąć kandydata!";
        if(formSubmitted)
        {
            StateHasChanged();
            await Task.Delay(1000);
            Cancel();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/candidatelist");
    }

}
