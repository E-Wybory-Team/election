@page "/verify/2fa-code"
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Application.DTOs
@using E_Wybory.Application.Wrappers
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Veify2FAcode> Logger
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<link href="forms.css" rel="stylesheet" />

<CascadingAuthenticationState>
    <AuthorizeView Context="authContext">
        <Authorized>
            <div class="center-content">
                <h3>Zweryfikuj kod 2FA</h3>
                <div class="row">
                    <div class="form-container">
                        <EditForm Model="Input" FormName="verify-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <InputText @bind-Value="Input.Code" id="Input.Code" class="form-control input-field" autocomplete="off" placeholder="Wprowadź kod" />
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="btn submit-button">Zweryfikuj</button>
                        </EditForm>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="status-message @messageClass">@message</div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@code {
    private string? message;
    private string messageClass = string.Empty;
    private UserWrapper user = default!;
    bool isValidUser = false;
    bool is2faEnabled = false;
    bool is2faVeryfied = false;

    [SupplyParameterFromForm]
    private TwoFactorAuthVerifyRequest Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthStateProvider.GetAuthenticationStateAsync();
        user = new UserWrapper(result.User);

        if(user.TwoFAenabled)
        {
            is2faEnabled = true;
        }
        else
        {
            message = "Użytkownik nie ma umożliwionej weryfikacji 2FA!";
            return;
        }

        if(user.TwoFAveryfied)
        {
            is2faVeryfied = true;
            message = "Użytkownik już przeszedł dwuskładnikową weryfikację. Zapraszamy do głosowania!";
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/vote");
            return;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        Input.Code = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);
        isValidUser = user.IsValid();
        if(!isValidUser)
        {
            message = "Nie znaleziono użytkownika";
            messageClass = "error";
            return;
        }
        

        Input.UserId = user.Id;
        var is2faTokenValid = await AuthService.VerifyTwoFactorTokenAsync(Input);

        if (!is2faTokenValid)
        {
            message = "Błędny kod weryfikacyjny";
            messageClass = "error";
            return;
        }

        Logger.LogInformation("Użytkownik o ID '{UserId}' zweryfikował kod 2FA.", user.Id);
        message = "Kod 2FA został zweryfikowany pomyślnie";
        messageClass = "success";    
        StateHasChanged();
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/vote");
    }
}
