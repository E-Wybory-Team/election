@page "/verify/2fa-code"
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Application.DTOs
@using E_Wybory.Application.Wrappers
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Veify2FAcode> Logger
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


<h3>Zweryfikuj kod 2FA</h3>

<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="verify-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Code" id="Input.Code" class="form-control" autocomplete="off" placeholder="Wprowadź kod" />
                <label for="Input.Code" class="control-label form-label">Kod weryfikacyjny</label>
                <ValidationMessage For="() => Input.Code" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Zweryfikuj</button>
        </EditForm>
    </div>
</div>

<StatusMessage Message="@message" />

@code {
    private string? message;
    private UserWrapper user = default!;
    bool isValidUser = false;

    [SupplyParameterFromForm]
    private TwoFactorAuthVerifyRequest Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthStateProvider.GetAuthenticationStateAsync();
        user = new UserWrapper(result.User);
    }

    private async Task OnValidSubmitAsync()
    {
        Input.Code = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);
        isValidUser = user.IsValid();
        if(!isValidUser)
        {
            message = "Nie znaleziono użytkownika";
            //StateHasChanged();
            return;
        }

        Input.UserId = user.Id;
        var is2faTokenValid = await AuthService.VerifyTwoFactorTokenAsync(Input);

        if (!is2faTokenValid)
        {
            message = "Błędny kod weryfikacyjny";
            return;
        }

        Logger.LogInformation("Użytkownik o ID '{UserId}' zweryfikował kod 2FA.", user.Id);
        message = "Kod 2FA został zweryfikowany pomyślnie";
    }
}
