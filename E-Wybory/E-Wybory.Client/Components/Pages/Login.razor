@page "/login"
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveWebAssembly
@inject E_Wybory.Client.Services.IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



<CascadingAuthenticationState>
<div class="login-form">
    <div class="icon">
        <img src="images/profile-tick.png" alt="Ikona logowania" width="400" height="400" />
    </div>

    <EditForm FormName="Auth" Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="input-group">
                <img src="images/user.png" alt="Ikona użytkownika" class="input-icon" />
                <InputText @bind-Value="loginModel.Username" placeholder="E-MAIL" class="form-input" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="input-group">
                <img src="images/lock.png" alt="Ikona zamka" class="input-icon" />
                <InputText @bind-Value="loginModel.Password" type="password" placeholder="HASŁO" class="form-input" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
        </div>

        <button type="submit" class="submit-button">ZALOGUJ</button>
        <div class="login-links">
            <a href="/forgot-password">Nie pamiętasz hasła?</a>
            <a href="/register">Nie masz konta?</a>
        </div>

    </EditForm>

    @* Decided to keep for debugging purposes, later delete *@

    @if (!string.IsNullOrEmpty(loginInfoMessage))
    {
        <p style="color: red;">@loginInfoMessage</p>
    }


</div>
</CascadingAuthenticationState>

@code {
    private LoginViewModel loginModel = new LoginViewModel();
    private string loginInfoMessage = String.Empty;

    private async Task HandleLogin()
    {
        var token = await AuthService.Login(loginModel);

        if (!string.IsNullOrEmpty(token))
        {
            loginInfoMessage = "Pomyślnie zalogowano!";
            StateHasChanged();
            await Task.Delay(1000);

            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", token);

            var roles = DecodeJwtRoles(token);

            if (roles.Contains("Administratorzy") || roles.Contains("Pracownicy PKW"))
            {
                NavigationManager.NavigateTo("/PKWHome");
            }
            else if (roles.Contains("Urzędnicy wyborczy"))
            {
                NavigationManager.NavigateTo("/UWHome");
            }
            else if (roles.Contains("Komisja wyborcza"))
            {
                NavigationManager.NavigateTo("/COHome");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            loginInfoMessage = "Niepoprawny e-mail bądź hasło!";
        }
    }

    private List<string> DecodeJwtRoles(string token)
    {
        var parts = token.Split('.');
        if (parts.Length != 3)
        {
            throw new ArgumentException("Invalid JWT token format.");
        }

        var payload = parts[1];
        var jsonBytes = Convert.FromBase64String(payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '='));
        var json = System.Text.Json.JsonDocument.Parse(jsonBytes);

        if (json.RootElement.TryGetProperty("Roles", out var rolesElement))
        {
            var rolesString = rolesElement.GetString();
            return rolesString?.Split(',').Select(r => r.Trim()).ToList() ?? new List<string>();
        }

        return new List<string>();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Nazwa użytkownika jest wymagana.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Hasło jest wymagane.")]
        public string Password { get; set; }
    }
}
