@page "/voterdelete/{voterId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.ViewModels
@inject NavigationManager NavigationManager
@inject IDistrictManagementService DistrictManagementService
@inject IVoterManagementService VoterManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionUserManagementService ElectionUserManagementService
<link href="forms.css" rel="stylesheet" />

<div class="form-container">
    <h1>USUWANIE WYBORCY Z OBWODU</h1>
    <EditForm Model="@voterModel" OnValidSubmit="HandleDeleteSubmit">
        <DataAnnotationsValidator />

        <div class="form-group-smaller">
            <label for="pesel">PESEL WYBORCY</label>
            <InputText @bind-Value="@EnteredPesel" id="pesel" class="form-input" readonly />
        </div>
        <div class="form-group-smaller">
            <label for="numer-obwodu">NUMER OBWODU</label>
            <InputText @bind-Value="@DistrictInfo" id="numer-obwodu" class="form-input" readonly />
        </div>

        <div class="form-row">
            <button type="submit" class="red-submit-button">USUŃ</button>
            <button type="button" class="submit-button" @onclick="Cancel">ANULUJ</button>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    [Parameter]
    public int voterId { get; set; }

    private string? EnteredPesel = String.Empty;
    private string? DistrictInfo = String.Empty;

    bool isDeletedVoter = false;
    string errorMessage;

    private VoterViewModel voterModel = new VoterViewModel();
    private PersonViewModel personModel = new PersonViewModel();
    private ElectionUserViewModel userViewModel = new ElectionUserViewModel();
    private DistrictViewModel districtModel = new DistrictViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (!await VoterManagementService.VoterExists(voterId))
        {
            errorMessage = "Voter not found";
            Cancel();
        }
        else
        {
            voterModel = await VoterManagementService.GetVoterById(voterId);
            try
            {
                userViewModel = await ElectionUserManagementService.GetElectionUserById(voterModel.IdElectionUser);
                personModel = await PersonManagementService.GetPersonById(userViewModel.IdPerson);
                EnteredPesel = personModel.PESEL;

                if (voterModel.IdDistrict != null)
                {
                    districtModel = await DistrictManagementService.GetDistrictById(voterModel.IdDistrict.Value);
                    DistrictInfo = $"{districtModel.DistrictName} - {districtModel.DistrictHeadquarters}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = "Nie ma powiązanego użytkownika w bazie!";
            }
        }
    }

    private async Task HandleDeleteSubmit()
    {
        isDeletedVoter = await VoterManagementService.DeleteVoter(voterId);
        errorMessage = isDeletedVoter ? "Updating voter successful!" : "Updating voter fails";
        Cancel();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/voterslist");
    }
}
