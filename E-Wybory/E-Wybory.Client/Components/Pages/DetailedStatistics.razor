@page "/detailed-statistics"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.FilterData
@using E_Wybory.Client.ViewModels
@using E_Wybory.Client.Services;
@inject IPartyManagementService PartyManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject NavigationManager NavigationManager
<link href="tables.css" rel="stylesheet" />

<div class="header-container">
    <h2 class="title">SZCZEGÓŁOWE WYNIKI DLA OBWODU</h2>    @* url bedzie detailed-statistics/{districtId:int}    trzeba kandydatów co mają ten districtID,  liczba wyborców uprawdnionych do głosowania tak jak na poprzedzającej stronie, liczba głosów nieważnych i liczba głosów ważnych oraz liczba głosów na poszczególnych kandydatów*@
</div>

<div class="filters">
    <div class="filter-group">
        <label>Rodzaj wyborów</label>
        <select @bind="@SelectedElectionTypeId" @bind:after="@OnElectionTypeChanged">
            <option value="">Wybierz rodzaj wyborów</option>
            @foreach (var electionType in wrapper.ElectionFilter)
            {
                <option value="@electionType.IdElectionType">
                    @electionType.ElectionTypeName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Liczba uprawnionych wyborców:</label>
        <p>150</p>                                      @* nigdzie indziej nie używamy <p> , styl zmieniony w app.css *@
    </div>
    <div class="filter-group">
        <label>Liczba głosów nieważnych:</label>
        <p>10</p>
    </div>
    <div class="filter-group">
        <label>Liczba głosów ważnych:</label>
        <p>100</p>

    </div>
   
    @* <div class="filter-group">
        <label>Numer obwodu</label>
        <select @bind="@SelectedDistrictId" @bind:after="@OnDistrictChanged">
            <option value="">Wybierz numer obwodu</option>
            @foreach (var district in wrapper.FilterListWrapper.DistrictFilter)
            {
                @if (district.IdProvince == SelectedProvinceId)
                {
                    <option value="@district.IdDistrict">
                        @district.DistrictName - @district.DistrictHeadquarters
                    </option>
                }
            }
        </select>
    </div>  *@
</div>

<table class="candidate-table">
    <thead>
        <tr>
            <th>Nazwisko i imiona</th>
            <th>Przynależność do partii politycznej</th>
            <th>Numer na liście </th>
            <th>Liczba głosów oddanych na kandydata</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var candidate in filteredCandidates)
        {
            var partyName = String.Empty;
            var age = PersonManagementService.CountPersonAge(candidate.personViewModel.BirthDate);

            if (candidate.candidateViewModel.IdParty != 0 && candidate.candidateViewModel.IdParty != null)
                partyName = PartyManagementService.GetPartyNameById(candidate.candidateViewModel.IdParty.GetValueOrDefault(), parties);

            <tr>

                <td>@candidate.personViewModel.Surname @candidate.personViewModel.Name</td
                <td>@partyName</td>
                <td>@candidate.candidateViewModel.PositionNumber</td
            </tr>

        }
    </tbody>
</table>

@code {

    private int? SelectedElectionTypeId { get; set; } = null;
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;
    private int? SelectedDistrictId { get; set; } = null;

    private List<CandidatePersonViewModel> filteredCandidates = new List<CandidatePersonViewModel>();
    private FilterListWrapperFull wrapper = new FilterListWrapperFull();
    private List<PartyViewModel> parties = new List<PartyViewModel>();

    protected override async Task OnInitializedAsync()
    {
        //it must be executed here because every parameters at the beginning are null
        filteredCandidates = await FilterWrapperService.GetFilteredCandidates(SelectedElectionTypeId, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId, SelectedDistrictId);
        wrapper.ElectionFilter = await ElectionTypeManagementService.ElectionTypes();
        parties = await PartyManagementService.Parties();
    }


    private async Task FilterCandidate()
    {
        wrapper = await FilterWrapperService.GetFilteredLists(SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
        filteredCandidates = await FilterWrapperService.GetFilteredCandidates(SelectedElectionTypeId, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId, SelectedDistrictId);
    }

    private async Task OnElectionTypeChanged()
    {
        SelectedVoivodeshipId = null;
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterCandidate();
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterCandidate();
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;
        SelectedDistrictId = null;

        await FilterCandidate();
    }

    private async Task OnProvinceChanged()
    {
        SelectedDistrictId = null;

        await FilterCandidate();
    }

    private async Task OnDistrictChanged()
    {
        await FilterCandidate();
    }
}
