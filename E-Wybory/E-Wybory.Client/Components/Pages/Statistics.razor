@page "/statistics"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.ComponentModel.DataAnnotations
@using E_Wybory.Client.FilterData
@using E_Wybory.Client.ViewModels
@using System.Text.RegularExpressions
@inject IElectionTypeManagementService ElectionTypeManagementService
@inject IElectionManagementService ElectionManagementService
@inject IVoteManagementService VoteManagementService
@inject IVoterManagementService VoterManagementService
@inject IDistrictManagementService DistrictManagementService
@inject IFilterWrapperManagementService FilterWrapperService
<link href="tables.css" rel="stylesheet" />

<h2 class="title">STATYSTYKI WYBORCZE</h2>

<div class="filters">
    <div class="filter-group">
        <label>Rodzaj wyborów</label>
        <select @bind="@SelectedElectionTypeId" @bind:after="@OnElectionTypeChanged">
            <option value="">Wybierz rodzaj wyborów</option>
            @foreach (var electionType in wrapper.ElectionFilter)
            {
                <option value="@electionType.IdElectionType">
                    @electionType.ElectionTypeName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Województwo</label>
        <select @bind="@SelectedVoivodeshipId" @bind:after="@OnVoivodeshipChanged">
            <option value="">Wybierz województwo</option>
            @foreach (var voivodeship in wrapper.FilterListWrapper.VoivodeshipFilter)
            {
                <option value="@voivodeship.idVoivodeship">
                    @voivodeship.voivodeshipName
                </option>
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Powiat</label>
        <select @bind="@SelectedCountyId" @bind:after="@OnCountyChanged">
            <option value="">Wybierz powiat</option>
            @foreach (var county in wrapper.FilterListWrapper.CountyFilter)
            {
                @if (county.IdVoivodeship == SelectedVoivodeshipId)
                {
                    <option value="@county.IdCounty">
                        @county.CountyName
                    </option>
                }
            }
        </select>
    </div>
    <div class="filter-group">
        <label>Gmina</label>
        <select @bind="@SelectedProvinceId" @bind:after="@OnProvinceChanged">
            <option value="">Wybierz gminę</option>
            @foreach (var province in wrapper.FilterListWrapper.ProvinceFilter)
            {
                @if (province.IdCounty == SelectedCountyId)
                {
                    <option value="@province.IdProvince">
                        @province.ProvinceName
                    </option>
                }
            }
        </select>
    </div>
    @if(SelectedProvinceId != null)
    {
    <div class="filter-group">
        <label>Frekwencja</label>
        <select bind="@SelectedAttendance" @onchange="(e => OnFrequencyChanged(e))">
            <option value="">Wybierz frekwencję</option>
            @foreach (var attendance in attendances)
            {
                <option value="@attendance">@attendance</option>
            }
        </select>
    </div>
    }
</div>

@if (election.IdElection != 0)
{
    var frequency = -1;
    if(SelectedFrequency != -1)
    {
        frequency = SelectedFrequency;
    }
    <h2>Wybory z dnia @election.ElectionStartDate.ToString("dd.MM.yyyy")</h2>
    if (SelectedProvinceId != null)
    {
    <table class="candidate-table">
        <thead>
            <tr>
                <th>Numer komisji</th>
                <th>Obwodowa komisja wyborcza</th>
                <th>Liczba uprawnionych</th>
                <th>Liczba głosów elektronicznych</th>
                <th>Frekwencja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var district in filteredDistricts)
            {
                    @if (districtsVotesNumber.ContainsKey((district.IdDistrict, election.IdElection)) && districtsFrequencies.ContainsKey((district.IdDistrict, election.IdElection, frequency)))
                {
                <tr>
                    <td>@district.IdDistrict</td>
                    <td>@district.DistrictHeadquarters</td>
                    <td>@districtVotersNumber[district.IdDistrict]</td>
                    <td>@districtsVotesNumber[(district.IdDistrict, election.IdElection)]</td>
                    <td>@districtsFrequencies[(district.IdDistrict, election.IdElection, frequency)] %</td>
                </tr>
                }
            }
        </tbody>
    </table>
    }
}
else if (SelectedElectionTypeId != null && SelectedElectionTypeId != 0)
{
    <div class="alert alert-danger mt-3">Nie znaleziono wyborów tego typu, które się kiedykolwiek zaczęły!</div>
}


@code {

    private int? SelectedElectionTypeId { get; set; } = null;
    private int? SelectedVoivodeshipId { get; set; } = null;
    private int? SelectedCountyId { get; set; } = null;
    private int? SelectedProvinceId { get; set; } = null;
    private int SelectedFrequency { get; set; } = -1;
    private string? SelectedAttendance { get; set; } = null;

    private Dictionary<int, int> districtVotersNumber = new Dictionary<int, int>();
    private Dictionary<(int, int), int> districtsVotesNumber = new Dictionary<(int, int), int>(); //keys: districtId, electionId
    private Dictionary<(int, int, int), double> districtsFrequencies = new Dictionary<(int, int, int), double>(); //keys: districtId, electionId, frequency

    private List<string> attendances = new() { "Do godziny 12:00", "Do godziny 17:00", "Całkowita" };
    private FilterListWrapperFull wrapper = new FilterListWrapperFull();
    private List<DistrictViewModel> filteredDistricts = new List<DistrictViewModel>();
    private ElectionViewModel election = new ElectionViewModel();
    private List<ElectionViewModel> allElections = new List<ElectionViewModel>();

    private async Task FilterTable(bool toChangeDictionaries)
    {
        wrapper.FilterListWrapper = await FilterWrapperService.GetFilteredListsWrapper(SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);

        //ifs below are added to limit calculations to db to read data
        if (toChangeDictionaries) //changes dictionaries only if province is selected
        {
            filteredDistricts = await FilterWrapperService.GetFilteredDistricts(null, SelectedVoivodeshipId, SelectedCountyId, SelectedProvinceId);
            foreach (var district in filteredDistricts)
            {
                if (!districtVotersNumber.ContainsKey(district.IdDistrict)) //change only if value of this key is not counted
                {
                    var votersNumber = await VoterManagementService.GetNumberVotersByDistrictId(district.IdDistrict);
                    districtVotersNumber[district.IdDistrict] = votersNumber;
                }

                foreach (var election in allElections)
                {
                    if (!districtsVotesNumber.ContainsKey((district.IdDistrict, election.IdElection))) //change only if value of this key is not counted
                    {
                        districtsVotesNumber[(district.IdDistrict, election.IdElection)] = await VoteManagementService.GetVotesNumberByDistrictId(district.IdDistrict, election.IdElection);
                    }

                    if (!districtsFrequencies.ContainsKey((district.IdDistrict, election.IdElection, -1))) //change only if value of this key is not counted
                    {
                        districtsFrequencies[(district.IdDistrict, election.IdElection, -1)] = await VoteManagementService.GetFrequencyByDistrictIdToHour(district.IdDistrict, election.IdElection, -1);
                    }
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        wrapper.ElectionFilter = await ElectionTypeManagementService.ElectionTypes();
        filteredDistricts = wrapper.FilterListWrapper.DistrictFilter;
        allElections = await ElectionManagementService.GetNewestElectionsOfAllTypes();
    }


    private async Task OnElectionTypeChanged()
    {
        SelectedVoivodeshipId = null;
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedAttendance = null;
        SelectedFrequency = -1;

        if (SelectedElectionTypeId != 0 && SelectedElectionTypeId != null)
        {
            election = ElectionManagementService.GetElectionOfTypeOfSingleElection(SelectedElectionTypeId.Value, allElections);
            if (election.IdElection != 0)
            {
                await FilterTable(false);
            }
        }
    }

    private async Task OnVoivodeshipChanged()
    {
        SelectedCountyId = null;
        SelectedProvinceId = null;
        SelectedAttendance = null;
        SelectedFrequency = -1;

        await FilterTable(false);
    }

    private async Task OnCountyChanged()
    {
        SelectedProvinceId = null;
        SelectedAttendance = null;
        SelectedFrequency = -1;

        await FilterTable(false);
    }

    private async Task OnProvinceChanged()
    {
        SelectedAttendance = null;
        SelectedFrequency = -1;
        await FilterTable(true);
    }

    private async Task OnFrequencyChanged(ChangeEventArgs e)
    {
        if (election.IdElection != 0) //executing only if current election exists
        {
            var attendance = e.Value?.ToString();
            var hourMax = ExtractHour(attendance);
            Console.WriteLine($"Extracted hour: {hourMax}");

            foreach (var district in filteredDistricts)
            {
                if (!districtsFrequencies.ContainsKey((district.IdDistrict, election.IdElection, hourMax))) //change only if value of this key is null
                {
                    districtsFrequencies[(district.IdDistrict, election.IdElection, (int)hourMax)] =
                       await VoteManagementService.GetFrequencyByDistrictIdToHour(district.IdDistrict, election.IdElection, (int)hourMax);
                }
            }
            SelectedFrequency = hourMax;
        }
    }

    private static int ExtractHour(string input)
    {
        var timePattern = @"\b([01]?[0-9]|2[0-3]):[0-5][0-9]\b";
        var regex = new Regex(timePattern);

        var match = regex.Match(input);
        if (match.Success)
        {
            var timeParts = match.Value.Split(':');
            if (int.TryParse(timeParts[0], out int hour))
            {
                return hour;
            }
        }

        return -1;
    }


    /*
    protected int GetVotersNumber(District district)
    {
        int VotersNumber = 100; // Tutaj znowu tak tylko hardtypowane bo też potrzeba jakiegoś sql który wyciągnie tą liczbę votersów w danym obwodzie

        return VotersNumber;
    }

    protected int GetVotersThatVoted(District district)
    {
        int Votes = 10; // Tutaj znowu tak tylko hardtypowane bo też potrzeba jakiegoś sql który wyciągnie tą liczbę ile votersów jest już oflagowany z hasVoted i to jeszcze w zależności od godzin

        return Votes;
    }

    protected float GetAttendancePercentage(District district)
    {
        int Percentage = 10; // Tutaj znowu tak tylko hardtypowane bo też potrzeba jakieś sposobu wyliczania


        return Percentage;
    }
    */

}
