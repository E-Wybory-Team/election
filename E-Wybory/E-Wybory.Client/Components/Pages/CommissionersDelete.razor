@page "/commissionersdelete/{commissionerId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using E_Wybory.Client.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IVoivodeshipManagementService VoivodeshipManagementService
@inject IFilterWrapperManagementService FilterWrapperService
@inject IUserTypeManagementService UserTypeManagementService
@inject IUserTypeSetsManagementService UserTypeSetsManagementService
@inject IPersonManagementService PersonManagementService
@inject IElectionUserManagementService ElectionUserManagementService

<link href="forms.css" rel="stylesheet" />
<CascadingAuthenticationState>
    <AuthorizeView Roles="Urzędnicy wyborczy, Administratorzy" Context="authContext">
         <Authorized>
<div class="form-container">
    <h1>POTWIERDŹ USUNIĘCIE CZŁONKA KOMISJI</h1>
    @if(readyToPrint)
    {
    <EditForm Model="@userTypeSetViewModel">
        <div class="form-group-smaller">
            <label for="pesel">PESEL CZŁONKA KOMISJI</label>
            <InputText @bind-Value="@enteredPesel" id="pesel" class="form-input" readonly />
        </div>
            <div class="form-group-smaller">
                <label for="wojewodztwo">WOJEWÓDZTWO</label>
                <InputText @bind-Value="@regionNames[3]" id="wojewodztwo" class="form-input" readonly />
            </div>
            <div class="form-group-smaller">
                <label for="powiat">POWIAT</label>
                <InputText @bind-Value="@regionNames[2]" id="powiat" class="form-input" readonly />
            </div>
            <div class="form-group-smaller">
                <label for="gmina">GMINA</label>
                <InputText @bind-Value="@regionNames[1]" id="gmina" class="form-input" readonly />
            </div>
                    
            <div class="form-group-smaller">
            <label for="numer-obwodu">NUMER OBWODU</label>
            <InputText @bind-Value="@regionNames[0]" id="numer-obwodu" class="form-input" readonly />
        </div>
        <div class="form-group-smaller">
            <label for="stopien">STOPIEŃ</label>
            <InputText @bind-Value="@typeName" id="stopien" class="form-input" readonly />
        </div>
        <div class="form-row">
            <button type="button" class="red-submit-button" @onclick="DeleteCommissioner">USUŃ</button>
            <button type="button" class="cancel-button" @onclick="Cancel">ANULUJ</button>
        </div>
        
    </EditForm>
    }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
</div>
                     </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
                <p class="not-authorized-message">Nie posiadasz odpowiednich uprawnień do wyświetlenia tej strony</p>
                <img src="images/WarningIcon.png" alt="Alert Icon" class="alert-icon" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    [Parameter]
    public int commissionerId { get; set; }

    private bool readyToPrint = false;

    private UserTypeSetViewModel userTypeSetViewModel = new UserTypeSetViewModel();
    private int commissionGroupId = 2;
    private string errorMessage = String.Empty;
    private string? enteredPesel { get; set; } = null;
    private string? typeName { get; set; } = null;
    private List<string> regionNames = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        if (!(await ElectionUserManagementService.UserExists(commissionerId)))
        {
            errorMessage = "Not found user with this ID";
            Cancel();
            return;
        }

        userTypeSetViewModel = await UserTypeSetsManagementService.SetWithTypeGroupExists(commissionGroupId, commissionerId);
        if (userTypeSetViewModel.IdUserTypeSet == 0)
        {
            errorMessage = "Not found user set to this group ID";
            Cancel();
            return;
        }

        typeName = await UserTypeManagementService.GetUserTypeNameById(userTypeSetViewModel.IdUserType);

        var person = await PersonManagementService.GetPersonIdByIdElectionUser(commissionerId);
        enteredPesel = person.PESEL;

        var electionUser = await ElectionUserManagementService.GetElectionUserById(commissionerId);
        regionNames = await FilterWrapperService.GetRegionsOfDistrict(electionUser.IdDistrict);
        readyToPrint = true;
    }


    private async Task DeleteCommissioner()
    {
        var isDeletedCommissioner = await UserTypeSetsManagementService.DeleteUserTypeSet(userTypeSetViewModel.IdUserTypeSet);
        errorMessage = isDeletedCommissioner ? "Usunięto członka komisji pomyślnie!" : "Usuwanie członka komisji nie powiodło się";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/commissionerslist");
    }

}
